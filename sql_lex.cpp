#line 2 "sql_lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /home/daffy/u0/vern/flex/RCS/flex.skl,v 2.85 95/04/24 10:48:47 vern Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
//#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define YY_USES_REJECT

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern int yylineno;
int yylineno = 1;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 685
#define YY_END_OF_BUFFER 686
static yyconst short int yy_acclist[3647] =
    {   0,
      686,  684,  685,  682,  684,  685,  683,  685,  651,  684,
      685,  684,  685,  684,  685,  611,  684,  685,  610,  684,
      685,  684,  685,  615,  684,  685,  616,  684,  685,  608,
      684,  685,  606,  684,  685,  614,  684,  685,  607,  684,
      685,  603,  684,  685,  609,  684,  685,  657,  684,  685,
      657,  684,  685,  656,  684,  685,  604,  684,  685,    2,
      684,  685,    6,  684,  685,    7,  684,  685,  653,  684,
      685,  605,  684,  685,  612,  684,  685,  684,  685,  672,
      684,  685,  672,  684,  685,  672,  684,  685,  672,  684,
      685,  672,  684,  685,  672,  684,  685,  672,  684,  685,

      672,  684,  685,  672,  684,  685,  672,  684,  685,  672,
      684,  685,  672,  684,  685,  672,  684,  685,  672,  684,
      685,  672,  684,  685,  672,  684,  685,  672,  684,  685,
      672,  684,  685,  672,  684,  685,  672,  684,  685,  672,
      684,  685,  672,  684,  685,  672,  684,  685,  672,  684,
      685,  672,  684,  685,  672,  684,  685,  652,  684,  685,
      613,  684,  685,  680,  685,  681,  685,  680,  685,    5,
      666,  664,  677,    1,  665,  663,  657,  659,  678,  658,
      654,    9,    3,    4,    8,   10,  673,  672,  672,  672,
      672,  672,  672,  672,   25,  672,   29,  672,  672,  672,

      672,  672,  672,  672,  672,  672,   48,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  138,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  214,  672,  672,  672,
      218,  672,  238,  672,  672,  243,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  344,  672,  672,  672,  672,
      672,  356,  672,  672,  364,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  543,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  597,  672,
      672,  672,  672,  672,  602,  679,  664,  663,  655,  662,
      658,  669,  660,  668,   11,  674,  676,  675,  671,  672,
      672,   14,  672,  672,  672,  672,  672,   18,  672,  672,
      672,   23,  672,   24,  672,   26,  672,  672,  672,   32,
      672,  672,  672,  672,  672,  672,  672,   41,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
       94,  672,  672,  672,  672,  672,  672,  111,  672,  672,
      117,  672,  672,  672,  672,  672,  672,  672,  672,  137,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  150,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  184,  672,  672,  672,  672,  672,  672,
      672,  197,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  229,  672,  672,  672,  242,  672,  672,  672,

      672,  672,  249,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  629,  672,  672,  672,  672,  672,  672,
      630,  672,  672,  631,  672,  325,  672,  672,  672,  672,
      672,  672,  672,  672,  339,  672,  342,  672,  672,  672,
      672,  672,  348,  672,  632,  672,  672,  672,  672,  672,
      672,  357,  672,  672,  672,  672,  672,  366,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  445,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  465,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  483,  672,  505,  672,  672,
      635,  672,  672,  672,  672,  642,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  568,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  598,  672,  596,  672,  672,  672,  664,  663,

      661,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  670,  672,  672,  672,  672,  672,
      672,  672,  672,   42,  672,  672,   44,  672,   46,  672,
      672,   49,  672,  672,   51,  672,  672,   54,  672,  621,
      672,  672,  672,  672,   59,  672,  672,  672,  672,  672,
      672,  672,   69,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,   97,  672,  672,
      672,  672,  672,  105,  672,  109,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  126,  672,  672,  672,
      672,  672,  672,  134,  672,  672,  672,  140,  672,  141,

      672,  672,  672,  672,  145,  672,  146,  672,  672,  672,
      151,  672,  672,  154,  672,  672,  672,  672,  672,  672,
      672,  672,  165,  672,  672,  672,  672,  672,  672,  672,
      672,  173,  672,  672,  672,  672,  177,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  189,  672,  190,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  203,  672,
      672,  205,  672,  672,  207,  672,  209,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  230,  672,
      231,  672,  232,  672,  233,  672,  234,  672,  672,  237,
      672,  672,  672,  672,  672,  672,  672,  672,  248,  672,

      672,  250,  672,  252,  672,  672,  254,  672,  672,  672,
      258,  672,  259,  672,  672,  261,  672,  672,  672,  266,
      672,  267,  672,  672,  271,  672,  672,  274,  672,  275,
      672,  278,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  326,  672,  672,
      672,  672,  672,  672,  335,  672,  672,  672,  672,  672,
      343,  672,  672,  672,  347,  672,  350,  672,  672,  672,
      672,  672,  672,  358,  672,  359,  672,  672,  672,  672,
      672,  672,  672,  372,  672,  672,  672,  672,  672,  672,
      672,  672,  384,  672,  672,  672,  672,  672,  388,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      402,  672,  406,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  447,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  467,  672,  672,  672,
      672,  672,  473,  672,  672,  672,  672,  477,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  513,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      533,  672,  534,  672,  535,  672,  536,  672,  672,  672,
      672,  672,  645,  672,  548,  672,  672,  550,  672,  672,
      672,  556,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  569,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  590,  672,  583,  672,  672,
      585,  672,  672,  587,  672,  672,  672,  591,  672,  592,
      672,  672,  672,  667,  595,  672,  599,  672,  672,  672,
      672,  672,   15,  672,  672,  672,  672,   20,  672,  672,
       27,  672,  672,  672,  672,  672,  672,  672,   36,  672,
      672,  672,  672,  672,  672,  672,  672,   43,  672,  672,

       47,  672,   50,  672,  672,  672,   56,  672,  672,  672,
      672,   62,  672,  672,  672,  672,   67,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  622,  672,  672,   96,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  155,  672,  672,  159,  672,  161,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      172,  672,  672,  175,  672,  672,  178,  672,  179,  672,

      180,  672,  183,  672,  185,  672,  672,  672,  188,  672,
      672,  672,  672,  672,  672,  672,  199,  672,  201,  672,
      672,  672,  672,  208,  672,  672,  672,  672,  672,  219,
      672,  672,  672,  223,  672,  224,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  256,  672,  260,  672,  262,  672,  672,  264,
      672,  268,  672,  272,  672,  672,  672,  672,  672,  672,
      303,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      316,  672,  672,  672,  672,  672,  672,  672,  672,  329,
      672,  672,  333,  672,  672,  336,  672,  672,  672,  341,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  365,  672,  367,  672,  672,  369,  672,  672,
      672,  672,  672,  378,  672,  672,  382,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  396,  672,  397,
      672,  672,  399,  672,  400,  672,  401,  672,  672,  405,
      672,  672,  672,  672,  672,  672,  672,  672,  414,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      430,  672,  672,  672,  672,  672,  672,  672,  672,  440,
      672,  441,  672,  672,  672,  672,  672,  672,  449,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  466,  672,  672,  672,  672,  672,  472,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  506,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  521,
      672,  672,  523,  672,  672,  672,  672,  525,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      551,  672,  672,  672,  672,  672,  672,  672,  558,  672,
      672,  672,  672,  672,  564,  672,  672,  672,  567,  672,
      672,  672,  572,  672,  672,  672,  576,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  588,  672,  589,  672,

      672,  594,  672,  672,  672,  672,   13,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,   34,  672,
       35,  672,  672,   38,  672,   39,  672,   40,  672,  672,
      619,  672,  672,  672,  672,  672,   57,  672,  672,  672,
      672,   64,  672,  672,   66,  672,  672,  672,   72,  672,
      672,   77,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,   95,  672,  672,  672,  103,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  125,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  139,  672,  672,

      672,  672,  147,  672,  148,  672,  672,  152,  672,  156,
      672,  157,  672,  160,  672,  672,  672,  164,  672,  672,
      168,  672,  672,  167,  672,  672,  672,  672,  174,  672,
      176,  672,  181,  672,  182,  672,  672,  187,  672,  672,
      672,  672,  672,  672,  198,  672,  200,  672,  672,  672,
      204,  672,  672,  672,  672,  672,  215,  672,  217,  672,
      672,  221,  672,  672,  672,  226,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  245,  672,  672,  672,  672,
      672,  257,  672,  263,  672,  672,  672,  672,  672,  672,
      672,  280,  672,  672,  672,  672,  672,  672,  672,  672,

      311,  672,  315,  672,  672,  672,  672,  672,  672,  321,
      672,  672,  328,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  351,  672,  672,  672,  354,  672,  672,
      672,  362,  672,  672,  672,  371,  672,  672,  672,  672,
      379,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  413,  672,  672,  672,  672,  420,  672,  421,  672,
      422,  672,  672,  424,  672,  428,  672,  672,  672,  672,
      672,  672,  672,  434,  672,  672,  672,  439,  672,  672,
      443,  672,  672,  672,  672,  672,  672,  452,  672,  455,

      672,  672,  458,  672,  672,  672,  461,  672,  464,  672,
      672,  672,  469,  672,  470,  672,  471,  672,  672,  672,
      476,  672,  478,  672,  479,  672,  480,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  508,  672,  672,  512,  672,  636,  672,
      672,  672,  516,  672,  672,  672,  672,  672,  640,  672,
      672,  672,  672,  672,  672,  527,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  559,  672,  672,  561,  672,  672,
      565,  672,  672,  672,  672,  672,  672,  577,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  617,  672,   16,  672,  672,  672,   21,  672,
       22,  672,  672,  672,  672,  672,   37,  672,  618,  672,
      620,  672,   45,  672,   52,  672,  672,   58,  672,  672,
       61,  672,  672,  672,  672,   70,  672,  672,  672,   75,
      672,   76,  672,  672,   79,  672,  672,  672,  672,  672,
      672,  672,  672,  672,   91,  672,  672,   93,  672,  623,
      672,   98,  672,  672,  624,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  118,  672,  119,  672,
      120,  672,  122,  672,  672,  123,  672,  672,  672,  672,

      672,  672,  132,  672,  133,  672,  672,  672,  672,  144,
      672,  672,  153,  672,  158,  672,  672,  163,  672,  672,
      169,  672,  672,  672,  627,  672,  186,  672,  672,  672,
      193,  672,  672,  672,  672,  202,  672,  672,  672,  672,
      672,  672,  220,  672,  672,  672,  672,  228,  672,  235,
      672,  672,  247,  672,  672,  672,  672,  672,  246,  672,
      672,  672,  255,  672,  672,  672,  273,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  320,  672,  672,  672,  672,
      672,  672,  672,  672,  338,  672,  672,  345,  672,  672,

      672,  352,  672,  672,  672,  672,  672,  361,  672,  368,
      672,  672,  373,  672,  672,  672,  672,  380,  672,  383,
      672,  672,  672,  386,  672,  672,  389,  672,  672,  672,
      392,  672,  394,  672,  398,  672,  672,  672,  407,  672,
      408,  672,  672,  672,  672,  672,  672,  672,  672,  419,
      672,  672,  672,  426,  672,  672,  429,  672,  672,  432,
      672,  672,  672,  672,  672,  438,  672,  672,  444,  672,
      672,  672,  672,  672,  672,  454,  672,  672,  672,  672,
      672,  672,  463,  672,  672,  672,  672,  481,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  514,  672,
      672,  672,  639,  672,  518,  672,  672,  672,  522,  672,
      672,  643,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  541,  672,  672,  672,  672,  546,  672,  672,
      672,  672,  672,  672,  557,  672,  672,  560,  672,  672,
      566,  672,  571,  672,  672,  672,  672,  647,  672,  672,
      672,  579,  672,  672,  672,  582,  672,  672,  672,  593,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
       53,  672,  672,  672,   63,  672,  672,   68,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,

       90,  672,   92,  672,  672,  672,  106,  672,  108,  672,
      625,  672,  626,  672,  110,  672,  112,  672,  672,  672,
      672,  672,  672,  672,  672,  127,  672,  672,  672,  672,
      135,  672,  142,  672,  672,  149,  672,  162,  672,  672,
      170,  672,  672,  191,  672,  192,  672,  194,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      236,  672,  672,  672,  672,  672,  672,  253,  672,  672,
      672,  276,  672,  277,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  306,  672,
      307,  672,  672,  672,  310,  672,  672,  672,  672,  672,

      672,  672,  324,  672,  672,  672,  327,  672,  672,  672,
      672,  672,  337,  672,  672,  672,  672,  353,  672,  672,
      360,  672,  672,  672,  672,  377,  672,  672,  633,  672,
      672,  387,  672,  672,  672,  672,  395,  672,  672,  672,
      672,  410,  672,  672,  672,  672,  672,  415,  672,  672,
      672,  672,  431,  672,  433,  672,  672,  672,  672,  442,
      672,  672,  672,  672,  451,  672,  672,  672,  457,  672,
      672,  672,  672,  672,  468,  672,  475,  672,  474,  672,
      482,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  485,  672,  672,  507,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  524,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  540,  672,  542,
      672,  544,  672,  672,  547,  672,  549,  672,  672,  672,
      672,  555,  672,  672,  563,  672,  672,  573,  672,  574,
      672,  648,  672,  672,  672,  672,  646,  672,  584,  672,
      672,  672,  601,  672,  672,   17,  672,   19,  672,  672,
      672,  672,  672,  672,   60,  672,  672,   71,  672,  672,
      672,   78,  672,  672,  672,  672,   83,  672,  672,  672,
      672,  672,  672,  672,  672,  107,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  131,  672,  672,  143,

      672,  166,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  241,  672,
      244,  672,  672,  672,  269,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  313,  672,  672,  672,  672,
      319,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      346,  672,  672,  672,  370,  672,  374,  672,  672,  385,
      672,  672,  391,  672,  672,  403,  672,  672,  672,  411,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      446,  672,  672,  450,  672,  672,  672,  459,  672,  460,

      672,  672,  672,  672,  672,  672,  672,  492,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      641,  672,  672,  672,  672,  672,  530,  672,  531,  672,
      672,  537,  672,  672,  672,  553,  672,  672,  562,  672,
      672,  672,  578,  672,  672,  581,  672,  672,  649,  672,
       12,  672,   28,  672,  672,  672,  672,  672,  672,  672,
      672,   80,  672,   81,  672,   82,  672,   84,  672,   85,
      672,   86,  672,  672,  672,  672,  672,  672,  114,  672,
      115,  672,  116,  672,  672,  672,  672,  672,  672,  672,

      672,  672,  196,  672,  672,  672,  672,  672,  672,  213,
      672,  672,  672,  672,  672,  672,  672,  672,  265,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  292,  672,  672,  672,  672,  672,  672,
      312,  672,  314,  672,  672,  672,  672,  672,  672,  331,
      672,  672,  672,  340,  672,  672,  672,  363,  672,  672,
      376,  672,  381,  672,  390,  672,  672,  404,  672,  672,
      412,  672,  672,  672,  423,  672,  425,  672,  672,  437,
      672,  672,  672,  448,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  496,  672,  672,  672,

      672,  672,  672,  672,  672,  672,  672,  486,  672,  672,
      672,  672,  637,  672,  672,  672,  672,  672,  672,  672,
      526,  672,  528,  672,  532,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  600,  672,  672,  672,  672,
      672,  672,  672,   74,  672,  672,  672,  672,  672,  104,
      672,  672,  672,  672,  672,  672,  130,  672,  136,  672,
      171,  672,  672,  672,  672,  672,  211,  672,  212,  672,
      672,  672,  225,  672,  672,  672,  672,  672,  672,  672,
      672,  282,  672,  672,  672,  672,  285,  672,  672,  672,
      289,  672,  672,  672,  672,  301,  672,  672,  672,  672,

      672,  672,  318,  672,  672,  672,  672,  672,  334,  672,
      672,  672,  672,  393,  672,  672,  672,  672,  672,  427,
      672,  672,  436,  672,  453,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  500,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      638,  672,  672,  672,  672,  644,  672,  672,  672,  672,
      545,  672,  552,  672,  672,  672,  672,  672,  672,  650,
      672,  672,  672,   55,  672,   65,  672,  672,  672,  672,
      672,   99,  672,  100,  672,  102,  672,  672,  121,  672,
      672,  128,  672,  672,  672,  628,  672,  672,  672,  672,

      222,  672,  672,  672,  672,  672,  672,  279,  672,  672,
      672,  284,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  317,  672,  672,  672,
      672,  332,  672,  672,  355,  672,  375,  672,  672,  672,
      672,  418,  672,  672,  672,  462,  672,  634,  672,  672,
      672,  672,  672,  672,  672,  494,  672,  672,  499,  672,
      672,  672,  672,  672,  501,  672,  504,  672,  484,  672,
      672,  672,  672,  672,  672,  519,  672,  672,  538,  672,
      672,  672,  672,  672,  580,  672,  672,  672,  672,  672,
       73,  672,  672,  672,  672,  672,  672,  672,  129,  672,

      672,  206,  672,  672,  672,  227,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  293,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  323,  672,  672,  672,  672,  672,  417,  672,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  672,  502,
      672,  672,  672,  672,  672,  672,  515,  672,  672,  520,
      672,  672,  539,  672,  672,  672,  575,  672,  586,  672,
       30,  672,  672,   33,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  239,  672,  672,  251,  672,  270,
      672,  672,  672,  672,  672,  287,  672,  672,  672,  672,

      672,  672,  672,  297,  672,  299,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  416,  672,  672,  672,
      672,  672,  672,  490,  672,  672,  672,  672,  498,  672,
      672,  497,  672,  672,  672,  672,  672,  529,  672,  672,
      570,  672,   31,  672,  672,   88,  672,  672,  672,  113,
      672,  124,  672,  672,  672,  672,  240,  672,  672,  672,
      672,  286,  672,  288,  672,  672,  672,  672,  295,  672,
      672,  672,  672,  672,  672,  672,  672,  672,  330,  672,
      672,  672,  672,  672,  487,  672,  672,  672,  672,  672,
      672,  503,  672,  672,  672,  672,  517,  672,  672,  672,

      672,  672,  672,  210,  672,  672,  672,  672,  672,  672,
      291,  672,  672,  672,  672,  672,  672,  672,  672,  672,
      672,  672,  409,  672,  672,  672,  672,  489,  672,  672,
      672,  495,  672,  672,  510,  672,  672,  554,  672,  672,
       89,  672,  101,  672,  672,  216,  672,  672,  672,  672,
      672,  294,  672,  296,  672,  672,  672,  672,  672,  672,
      672,  672,  672,  672,  672,  672,  491,  672,  672,  509,
      672,  672,   87,  672,  195,  672,  672,  672,  672,  290,
      672,  298,  672,  672,  672,  672,  672,  672,  322,  672,
      349,  672,  672,  456,  672,  488,  672,  672,  511,  672,

      672,  672,  672,  672,  672,  672,  672,  672,  672,  493,
      672,  281,  672,  283,  672,  672,  672,  672,  305,  672,
      308,  672,  309,  672,  672,  672,  672,  672,  435,  672,
      672,  672,  672,  302,  672,  672,  672,  672,  304,  672,
      672,  672,  672,  672,  300,  672
    } ;

static yyconst short int yy_accept[2974] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    4,    7,
        9,   12,   14,   16,   19,   22,   24,   27,   30,   33,
       36,   39,   42,   45,   48,   51,   54,   57,   60,   63,
       66,   69,   72,   75,   78,   80,   83,   86,   89,   92,
       95,   98,  101,  104,  107,  110,  113,  116,  119,  122,
      125,  128,  131,  134,  137,  140,  143,  146,  149,  152,
      155,  158,  161,  164,  166,  168,  170,  171,  171,  172,
      173,  173,  173,  174,  175,  175,  176,  177,  177,  177,
      177,  178,  179,  179,  180,  181,  181,  181,  181,  182,
      183,  184,  185,  186,  187,  187,  187,  187,  187,  188,

      188,  189,  190,  191,  192,  193,  194,  195,  197,  199,
      200,  201,  201,  202,  203,  204,  205,  206,  207,  209,
      210,  211,  212,  213,  214,  215,  216,  217,  218,  219,
      220,  222,  223,  224,  225,  226,  227,  228,  229,  230,
      231,  232,  233,  234,  235,  236,  237,  238,  239,  240,
      241,  242,  243,  244,  245,  246,  247,  249,  250,  251,
      253,  255,  256,  258,  259,  260,  261,  262,  263,  264,
      265,  266,  267,  268,  269,  270,  271,  272,  273,  274,
      275,  276,  278,  279,  280,  281,  282,  284,  285,  287,
      288,  289,  290,  291,  292,  293,  294,  295,  296,  297,

      298,  299,  300,  301,  302,  303,  304,  305,  306,  307,
      308,  309,  310,  311,  312,  313,  314,  315,  316,  317,
      318,  319,  320,  321,  322,  324,  325,  326,  327,  328,
      329,  330,  331,  332,  333,  334,  335,  336,  337,  338,
      338,  339,  341,  342,  343,  344,  345,  346,  347,  347,
      347,  348,  348,  348,  348,  349,  349,  349,  350,  350,
      351,  352,  352,  353,  353,  354,  355,  356,  356,  357,
      357,  358,  358,  359,  359,  360,  361,  362,  364,  365,
      366,  367,  368,  370,  371,  372,  374,  376,  378,  379,
      380,  382,  382,  383,  384,  385,  386,  387,  388,  390,

      391,  392,  393,  394,  395,  396,  397,  398,  399,  400,
      401,  402,  403,  404,  405,  406,  407,  408,  409,  410,
      411,  413,  414,  415,  416,  417,  418,  420,  421,  423,
      424,  425,  426,  427,  428,  429,  430,  432,  433,  434,
      435,  436,  437,  438,  439,  440,  441,  442,  444,  445,
      446,  447,  448,  449,  450,  451,  452,  453,  454,  455,
      456,  457,  458,  459,  460,  461,  462,  463,  464,  466,
      467,  468,  469,  470,  471,  472,  474,  475,  476,  477,
      478,  479,  480,  481,  482,  483,  484,  485,  486,  487,
      488,  489,  490,  491,  492,  493,  495,  496,  497,  499,

      500,  501,  502,  503,  505,  506,  507,  508,  509,  510,
      511,  512,  513,  514,  515,  516,  517,  518,  519,  520,
      521,  522,  523,  524,  526,  527,  528,  529,  530,  531,
      533,  534,  536,  538,  539,  540,  541,  542,  543,  544,
      545,  547,  549,  550,  551,  552,  553,  555,  557,  558,
      559,  560,  561,  562,  564,  565,  566,  567,  568,  570,
      571,  572,  573,  574,  575,  576,  577,  578,  579,  580,
      581,  582,  583,  584,  585,  586,  587,  588,  589,  590,
      591,  592,  593,  594,  595,  596,  597,  598,  599,  600,
      601,  602,  603,  604,  605,  606,  607,  608,  610,  611,

      612,  613,  614,  615,  616,  617,  618,  619,  621,  622,
      623,  624,  625,  626,  627,  628,  629,  630,  631,  632,
      633,  634,  635,  636,  638,  640,  641,  643,  644,  645,
      646,  648,  649,  650,  651,  652,  653,  654,  655,  656,
      657,  658,  659,  660,  661,  662,  663,  664,  665,  666,
      667,  668,  669,  670,  671,  672,  673,  674,  675,  677,
      678,  679,  680,  681,  682,  683,  684,  685,  686,  687,
      688,  689,  690,  691,  692,  692,  693,  695,  697,  698,
      699,  699,  700,  700,  701,  701,  702,  703,  704,  705,
      706,  707,  708,  709,  710,  711,  712,  713,  714,  715,

      716,  717,  718,  719,  720,  721,  722,  723,  724,  726,
      727,  729,  731,  732,  734,  735,  737,  738,  740,  742,
      743,  744,  745,  747,  748,  749,  750,  751,  752,  753,
      755,  756,  757,  758,  759,  760,  761,  762,  763,  764,
      765,  766,  767,  768,  770,  771,  772,  773,  774,  776,
      778,  779,  780,  781,  782,  783,  784,  785,  786,  787,
      789,  790,  791,  792,  793,  794,  796,  797,  798,  800,
      802,  803,  804,  805,  807,  809,  810,  811,  813,  814,
      816,  817,  818,  819,  820,  821,  822,  823,  825,  826,
      827,  828,  829,  830,  831,  832,  834,  835,  836,  837,

      839,  840,  841,  842,  843,  844,  845,  846,  847,  849,
      851,  852,  853,  854,  855,  856,  857,  858,  859,  861,
      862,  864,  865,  867,  869,  870,  871,  872,  873,  874,
      875,  876,  877,  878,  879,  881,  883,  885,  887,  889,
      890,  892,  893,  894,  895,  896,  897,  898,  899,  901,
      902,  904,  906,  907,  909,  910,  911,  913,  915,  916,
      918,  919,  920,  922,  924,  925,  927,  928,  930,  932,
      934,  935,  936,  937,  938,  939,  940,  941,  942,  943,
      944,  945,  946,  947,  948,  950,  951,  952,  953,  954,
      955,  957,  958,  959,  960,  961,  963,  964,  965,  967,

      969,  970,  971,  972,  973,  974,  976,  978,  979,  980,
      981,  982,  983,  984,  986,  987,  988,  989,  990,  991,
      992,  993,  995,  996,  997,  998,  999, 1001, 1002, 1003,
     1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1013, 1015,
     1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025,
     1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035,
     1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046,
     1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056,
     1057, 1059, 1060, 1061, 1062, 1063, 1065, 1066, 1067, 1068,
     1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079,

     1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090,
     1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100,
     1101, 1103, 1105, 1107, 1109, 1110, 1111, 1112, 1113, 1115,
     1117, 1118, 1120, 1121, 1122, 1124, 1125, 1126, 1127, 1128,
     1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139,
     1140, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1150, 1151,
     1153, 1154, 1156, 1157, 1158, 1160, 1162, 1163, 1164, 1165,
     1167, 1169, 1170, 1170, 1170, 1170, 1170, 1171, 1172, 1173,
     1175, 1176, 1177, 1178, 1180, 1181, 1183, 1184, 1185, 1186,
     1187, 1188, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1197,

     1198, 1200, 1201, 1203, 1205, 1206, 1207, 1209, 1210, 1211,
     1212, 1214, 1215, 1216, 1217, 1219, 1220, 1221, 1222, 1223,
     1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233,
     1234, 1235, 1236, 1238, 1239, 1241, 1242, 1243, 1244, 1245,
     1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255,
     1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265,
     1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275,
     1277, 1278, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1293, 1294, 1296, 1297, 1299, 1301, 1303,
     1305, 1307, 1308, 1309, 1311, 1312, 1313, 1314, 1315, 1316,

     1317, 1319, 1321, 1322, 1323, 1324, 1326, 1327, 1328, 1329,
     1330, 1332, 1333, 1334, 1336, 1338, 1339, 1340, 1341, 1342,
     1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352,
     1353, 1355, 1357, 1359, 1360, 1362, 1364, 1366, 1367, 1368,
     1369, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379,
     1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390,
     1392, 1393, 1395, 1396, 1398, 1399, 1400, 1402, 1403, 1404,
     1405, 1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1415,
     1417, 1418, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1429,
     1430, 1431, 1432, 1433, 1434, 1435, 1436, 1437, 1438, 1440,

     1442, 1443, 1445, 1447, 1449, 1450, 1452, 1453, 1454, 1455,
     1456, 1457, 1458, 1459, 1461, 1462, 1463, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1473, 1474, 1475, 1476, 1477,
     1478, 1479, 1480, 1482, 1484, 1485, 1486, 1487, 1488, 1489,
     1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1500,
     1501, 1502, 1504, 1505, 1506, 1507, 1508, 1510, 1511, 1512,
     1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521, 1522,
     1523, 1524, 1525, 1526, 1527, 1529, 1530, 1531, 1532, 1533,
     1534, 1535, 1536, 1537, 1538, 1539, 1540, 1542, 1543, 1545,
     1546, 1547, 1548, 1550, 1551, 1552, 1553, 1554, 1555, 1556,

     1557, 1558, 1559, 1560, 1561, 1563, 1564, 1565, 1566, 1567,
     1568, 1569, 1571, 1572, 1573, 1574, 1575, 1577, 1578, 1579,
     1581, 1582, 1583, 1585, 1586, 1587, 1589, 1590, 1591, 1592,
     1593, 1594, 1595, 1596, 1597, 1599, 1601, 1601, 1602, 1604,
     1605, 1606, 1607, 1609, 1610, 1611, 1612, 1613, 1614, 1615,
     1616, 1617, 1618, 1619, 1621, 1623, 1624, 1626, 1628, 1630,
     1631, 1633, 1634, 1635, 1636, 1637, 1639, 1640, 1641, 1642,
     1644, 1645, 1647, 1648, 1649, 1651, 1652, 1654, 1655, 1656,
     1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666,
     1668, 1669, 1670, 1672, 1673, 1674, 1675, 1676, 1677, 1678,

     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688,
     1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1700,
     1701, 1702, 1703, 1705, 1707, 1708, 1710, 1712, 1714, 1716,
     1717, 1718, 1720, 1721, 1723, 1724, 1726, 1727, 1728, 1729,
     1731, 1733, 1735, 1737, 1738, 1740, 1741, 1742, 1743, 1744,
     1745, 1747, 1749, 1750, 1751, 1753, 1754, 1755, 1756, 1757,
     1759, 1761, 1762, 1764, 1765, 1766, 1768, 1769, 1770, 1771,
     1772, 1773, 1774, 1775, 1776, 1778, 1779, 1780, 1781, 1782,
     1784, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1794, 1795,
     1796, 1797, 1798, 1799, 1800, 1801, 1803, 1805, 1806, 1807,

     1808, 1809, 1810, 1812, 1813, 1815, 1816, 1817, 1818, 1819,
     1820, 1821, 1822, 1823, 1824, 1826, 1827, 1828, 1830, 1831,
     1832, 1834, 1835, 1836, 1838, 1839, 1840, 1841, 1843, 1844,
     1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854,
     1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1864, 1865,
     1866, 1867, 1869, 1871, 1873, 1874, 1876, 1878, 1879, 1880,
     1881, 1882, 1883, 1884, 1886, 1887, 1888, 1890, 1891, 1893,
     1894, 1895, 1896, 1897, 1898, 1900, 1902, 1903, 1905, 1906,
     1907, 1909, 1911, 1912, 1913, 1915, 1917, 1919, 1920, 1921,
     1923, 1925, 1927, 1929, 1930, 1931, 1932, 1933, 1934, 1935,

     1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1946,
     1947, 1949, 1951, 1952, 1953, 1955, 1956, 1957, 1958, 1959,
     1961, 1962, 1963, 1964, 1965, 1966, 1968, 1969, 1970, 1971,
     1972, 1973, 1974, 1975, 1976, 1977, 1978, 1979, 1980, 1981,
     1982, 1983, 1984, 1985, 1987, 1988, 1990, 1991, 1993, 1994,
     1995, 1996, 1997, 1998, 2000, 2001, 2002, 2003, 2004, 2005,
     2006, 2007, 2008, 2009, 2009, 2009, 2010, 2011, 2012, 2013,
     2015, 2017, 2018, 2019, 2021, 2023, 2024, 2025, 2026, 2027,
     2029, 2031, 2033, 2035, 2037, 2038, 2040, 2041, 2043, 2044,
     2045, 2046, 2048, 2049, 2050, 2052, 2054, 2055, 2057, 2058,

     2059, 2060, 2061, 2062, 2063, 2064, 2065, 2067, 2068, 2070,
     2072, 2074, 2075, 2077, 2078, 2079, 2080, 2081, 2082, 2083,
     2084, 2085, 2086, 2087, 2089, 2091, 2093, 2095, 2096, 2098,
     2099, 2100, 2101, 2102, 2103, 2105, 2107, 2108, 2109, 2110,
     2112, 2113, 2115, 2117, 2118, 2120, 2121, 2123, 2124, 2125,
     2127, 2129, 2130, 2131, 2133, 2134, 2135, 2136, 2138, 2139,
     2140, 2141, 2142, 2143, 2145, 2146, 2147, 2148, 2150, 2152,
     2153, 2155, 2156, 2157, 2158, 2159, 2161, 2162, 2163, 2165,
     2166, 2167, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
     2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,

     2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195, 2197, 2198,
     2200, 2201, 2202, 2204, 2205, 2206, 2207, 2208, 2210, 2212,
     2213, 2215, 2216, 2217, 2218, 2220, 2222, 2223, 2224, 2226,
     2227, 2229, 2230, 2231, 2233, 2235, 2237, 2238, 2239, 2241,
     2243, 2244, 2245, 2246, 2247, 2248, 2249, 2250, 2252, 2253,
     2254, 2256, 2257, 2259, 2260, 2262, 2263, 2264, 2265, 2266,
     2268, 2269, 2271, 2272, 2273, 2274, 2275, 2276, 2278, 2279,
     2280, 2281, 2282, 2283, 2285, 2286, 2287, 2288, 2290, 2291,
     2292, 2293, 2294, 2295, 2296, 2297, 2298, 2299, 2300, 2301,
     2302, 2303, 2304, 2305, 2306, 2307, 2308, 2309, 2311, 2312,

     2313, 2315, 2317, 2318, 2319, 2321, 2322, 2324, 2325, 2326,
     2327, 2328, 2329, 2330, 2331, 2332, 2333, 2335, 2336, 2337,
     2338, 2340, 2341, 2342, 2343, 2344, 2345, 2347, 2348, 2350,
     2351, 2353, 2355, 2356, 2357, 2358, 2360, 2361, 2362, 2364,
     2365, 2366, 2368, 2369, 2370, 2370, 2370, 2372, 2373, 2374,
     2375, 2376, 2377, 2378, 2379, 2380, 2381, 2383, 2384, 2385,
     2387, 2388, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,
     2398, 2399, 2400, 2401, 2403, 2405, 2406, 2407, 2409, 2411,
     2413, 2415, 2417, 2419, 2420, 2421, 2422, 2423, 2424, 2425,
     2426, 2428, 2429, 2430, 2431, 2433, 2435, 2436, 2438, 2440,

     2441, 2443, 2444, 2446, 2448, 2450, 2451, 2452, 2453, 2454,
     2455, 2456, 2457, 2458, 2459, 2460, 2461, 2463, 2464, 2465,
     2466, 2467, 2468, 2470, 2471, 2472, 2474, 2476, 2477, 2478,
     2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486, 2487, 2488,
     2489, 2491, 2493, 2494, 2495, 2497, 2498, 2499, 2500, 2501,
     2502, 2503, 2505, 2506, 2507, 2509, 2510, 2511, 2512, 2513,
     2515, 2516, 2517, 2518, 2520, 2521, 2523, 2524, 2525, 2526,
     2528, 2529, 2531, 2532, 2534, 2535, 2536, 2537, 2539, 2540,
     2541, 2542, 2544, 2545, 2546, 2547, 2548, 2550, 2551, 2552,
     2553, 2555, 2557, 2558, 2559, 2560, 2562, 2563, 2564, 2565,

     2567, 2568, 2569, 2571, 2572, 2573, 2574, 2575, 2577, 2579,
     2581, 2583, 2584, 2585, 2586, 2587, 2588, 2589, 2590, 2591,
     2592, 2593, 2594, 2596, 2597, 2599, 2600, 2601, 2602, 2603,
     2604, 2605, 2606, 2607, 2608, 2610, 2611, 2612, 2613, 2614,
     2615, 2616, 2617, 2618, 2620, 2622, 2624, 2625, 2627, 2629,
     2630, 2631, 2632, 2634, 2635, 2637, 2638, 2640, 2642, 2644,
     2645, 2646, 2647, 2649, 2651, 2652, 2652, 2652, 2653, 2655,
     2656, 2658, 2660, 2661, 2662, 2663, 2664, 2665, 2667, 2668,
     2670, 2671, 2672, 2674, 2675, 2676, 2677, 2679, 2680, 2681,
     2682, 2683, 2684, 2685, 2686, 2688, 2689, 2690, 2691, 2692,

     2693, 2694, 2695, 2696, 2697, 2699, 2700, 2702, 2704, 2705,
     2706, 2707, 2708, 2709, 2710, 2711, 2712, 2713, 2714, 2715,
     2716, 2717, 2718, 2719, 2721, 2723, 2724, 2725, 2727, 2728,
     2729, 2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738,
     2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746, 2748, 2749,
     2750, 2751, 2753, 2754, 2755, 2756, 2757, 2758, 2759, 2760,
     2761, 2763, 2764, 2765, 2767, 2769, 2770, 2772, 2773, 2775,
     2776, 2778, 2779, 2780, 2782, 2783, 2784, 2785, 2786, 2787,
     2788, 2789, 2790, 2791, 2793, 2794, 2796, 2797, 2798, 2800,
     2802, 2803, 2804, 2805, 2806, 2807, 2808, 2810, 2811, 2812,

     2813, 2814, 2815, 2816, 2817, 2818, 2819, 2820, 2821, 2822,
     2823, 2824, 2825, 2826, 2827, 2828, 2829, 2830, 2831, 2833,
     2834, 2835, 2836, 2837, 2839, 2841, 2842, 2844, 2845, 2846,
     2848, 2849, 2851, 2852, 2853, 2855, 2856, 2858, 2859, 2860,
     2860, 2861, 2863, 2865, 2866, 2867, 2868, 2869, 2870, 2871,
     2872, 2874, 2876, 2878, 2880, 2882, 2884, 2885, 2886, 2887,
     2888, 2889, 2891, 2893, 2895, 2896, 2897, 2898, 2899, 2900,
     2901, 2902, 2903, 2905, 2906, 2907, 2908, 2909, 2910, 2912,
     2913, 2914, 2915, 2916, 2917, 2918, 2919, 2921, 2922, 2923,
     2924, 2925, 2926, 2927, 2928, 2929, 2930, 2931, 2932, 2933,

     2934, 2936, 2937, 2938, 2939, 2940, 2941, 2943, 2945, 2946,
     2947, 2948, 2949, 2950, 2952, 2953, 2954, 2956, 2957, 2958,
     2960, 2961, 2963, 2965, 2967, 2968, 2970, 2971, 2973, 2974,
     2975, 2977, 2979, 2980, 2982, 2983, 2984, 2986, 2987, 2988,
     2989, 2990, 2991, 2992, 2993, 2994, 2995, 2996, 2997, 2999,
     3000, 3001, 3002, 3003, 3004, 3005, 3006, 3007, 3008, 3010,
     3011, 3012, 3013, 3015, 3016, 3017, 3018, 3019, 3020, 3021,
     3023, 3025, 3027, 3028, 3029, 3030, 3031, 3032, 3033, 3034,
     3035, 3036, 3036, 3038, 3039, 3040, 3041, 3042, 3043, 3044,
     3046, 3047, 3048, 3049, 3050, 3052, 3053, 3054, 3055, 3056,

     3057, 3059, 3061, 3063, 3064, 3065, 3066, 3067, 3069, 3071,
     3072, 3073, 3075, 3076, 3077, 3078, 3079, 3080, 3081, 3082,
     3084, 3085, 3086, 3087, 3089, 3090, 3091, 3093, 3094, 3095,
     3096, 3098, 3099, 3100, 3101, 3102, 3103, 3105, 3106, 3107,
     3108, 3109, 3111, 3112, 3113, 3114, 3116, 3117, 3118, 3119,
     3120, 3122, 3123, 3125, 3127, 3128, 3129, 3130, 3131, 3132,
     3133, 3134, 3135, 3136, 3137, 3138, 3140, 3141, 3142, 3143,
     3144, 3145, 3146, 3147, 3148, 3149, 3150, 3151, 3153, 3154,
     3155, 3156, 3158, 3159, 3160, 3161, 3163, 3165, 3166, 3167,
     3168, 3169, 3170, 3171, 3172, 3173, 3174, 3176, 3178, 3179,

     3180, 3181, 3182, 3184, 3186, 3188, 3189, 3191, 3192, 3194,
     3195, 3196, 3198, 3199, 3200, 3201, 3203, 3204, 3205, 3206,
     3207, 3208, 3210, 3211, 3212, 3214, 3215, 3216, 3217, 3218,
     3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3227, 3229,
     3230, 3231, 3232, 3234, 3235, 3237, 3239, 3240, 3241, 3242,
     3244, 3245, 3246, 3248, 3250, 3251, 3252, 3253, 3254, 3255,
     3256, 3258, 3259, 3261, 3262, 3263, 3264, 3265, 3267, 3269,
     3271, 3272, 3273, 3274, 3275, 3276, 3278, 3279, 3281, 3282,
     3283, 3284, 3285, 3287, 3288, 3289, 3290, 3291, 3293, 3294,
     3295, 3296, 3297, 3298, 3299, 3301, 3302, 3304, 3305, 3306,

     3308, 3309, 3310, 3311, 3312, 3313, 3314, 3315, 3316, 3317,
     3318, 3319, 3320, 3322, 3323, 3324, 3325, 3326, 3327, 3328,
     3329, 3330, 3331, 3332, 3334, 3335, 3336, 3337, 3338, 3340,
     3341, 3342, 3343, 3344, 3345, 3346, 3347, 3348, 3349, 3350,
     3352, 3353, 3354, 3355, 3356, 3357, 3359, 3360, 3362, 3363,
     3365, 3366, 3367, 3369, 3371, 3373, 3374, 3376, 3377, 3378,
     3379, 3380, 3381, 3382, 3383, 3384, 3385, 3387, 3388, 3390,
     3392, 3393, 3394, 3395, 3396, 3398, 3399, 3400, 3401, 3402,
     3403, 3404, 3406, 3408, 3409, 3410, 3411, 3412, 3413, 3414,
     3415, 3416, 3417, 3419, 3420, 3421, 3422, 3423, 3424, 3426,

     3427, 3428, 3429, 3431, 3432, 3434, 3435, 3436, 3437, 3438,
     3440, 3441, 3443, 3445, 3446, 3448, 3449, 3450, 3452, 3454,
     3455, 3456, 3457, 3459, 3460, 3461, 3462, 3464, 3466, 3467,
     3468, 3469, 3471, 3472, 3473, 3474, 3475, 3476, 3477, 3478,
     3479, 3481, 3482, 3483, 3484, 3485, 3487, 3488, 3489, 3490,
     3491, 3492, 3494, 3495, 3496, 3497, 3499, 3500, 3501, 3502,
     3503, 3504, 3506, 3507, 3508, 3509, 3510, 3511, 3513, 3514,
     3515, 3516, 3517, 3518, 3519, 3520, 3521, 3522, 3523, 3525,
     3526, 3527, 3528, 3530, 3531, 3532, 3534, 3535, 3537, 3538,
     3540, 3541, 3543, 3545, 3546, 3548, 3549, 3550, 3551, 3552,

     3554, 3556, 3557, 3558, 3559, 3560, 3561, 3562, 3563, 3564,
     3565, 3566, 3567, 3569, 3570, 3572, 3573, 3575, 3577, 3578,
     3579, 3580, 3582, 3584, 3585, 3586, 3587, 3588, 3589, 3591,
     3593, 3594, 3596, 3598, 3599, 3601, 3602, 3603, 3604, 3605,
     3606, 3607, 3608, 3609, 3610, 3612, 3614, 3616, 3617, 3618,
     3619, 3621, 3623, 3625, 3626, 3627, 3628, 3629, 3631, 3632,
     3633, 3634, 3636, 3637, 3638, 3639, 3641, 3642, 3643, 3644,
     3645, 3647, 3647
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    1,    8,    9,   10,   11,
       12,   13,   14,   15,   16,   17,   18,   19,   20,   21,
       22,   23,   24,   25,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   39,   40,   41,   42,   43,   44,
       45,   46,   47,   48,   49,   50,   51,   52,   53,   54,
       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
        1,   35,    1,   36,   37,   38,   39,   40,   41,   42,

       43,   44,   45,   46,   47,   48,   49,   50,   51,   52,
       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,    1,   65,    1,   66,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[67] =
    {   0,
        1,    1,    2,    1,    1,    3,    1,    1,    1,    4,
        1,    1,    1,    5,    1,    6,    7,    1,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    9,   10,   11,   11,
       11,   11,   12,   11,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    1,    1
    } ;

static yyconst short int yy_base[2996] =
    {   0,
        0,    0,   64,   65,    0,    0, 3411, 3412, 3412, 3412,
     3379,   66, 3406, 3412, 3399,   70, 3412, 3412, 3412, 3412,
     3412,   54, 3364, 3393,   59,   34, 3374, 3412,   51, 3412,
       53, 3412,   80, 3412,  121,  147,  180,   61,   50,  164,
      189,   48,  155,  202, 3351,   45,  218,  219,  234,  236,
      250, 3344,  265,  285,  306,  177,   40,  274,  331, 3359,
     3358, 3335, 3412, 3412, 3412, 3381, 3412,  190, 3412, 3392,
      206, 3394, 3412, 3412,  264, 3412, 3386,  281, 3392, 3351,
       54, 3350,   96, 3412, 3349,  181,  197,    0, 3412, 3412,
     3359, 3412, 3412, 3412, 3387, 3386, 3385,  346, 3412,  410,

        0,  210, 3345, 3328,  224,  306,  259,  174,    0, 3327,
     3339,  230, 3342,  289,  305, 3329,  249, 3325, 3322,  317,
      179, 3325,  272,  438, 3319,  318,  320,  247,  442,  445,
     3318, 3323,  326, 3323, 3333, 3316,  465, 3316, 3330, 3327,
      325,  428, 3311,  453,  211,  181, 3315,  229,  459, 3314,
      440,  321, 3316, 3320,  226, 3321,    0, 3311, 3308,  474,
     3324, 3319,  438, 3316, 3311, 3294, 3306,  456,  481,  488,
      503,  471,  501,  508,  494,  464, 3298,  472, 3308, 3313,
      500,  517,  515, 3313, 3307, 3308,  520,  152, 3307, 3290,
     3295,  526, 3307, 3286,  529,  534, 3288,  541, 3291,  550,

     3297, 3294,  556, 3284, 3279, 3292,  568,  560,  523,  558,
     3298, 3297,  580,  455, 3285, 3284,  588,  583,  589, 3276,
     3292,  587,  508,  521,    0,  603, 3277,  606,  551,  618,
     3289,  579, 3286,  598,  569,  623, 3270, 3271,  612,    0,
     3307,    0, 3275, 3268, 3284, 3266, 3412, 3412,  640,  665,
      666,  670,  319,  657,  671,  674, 3318, 3412,  691,  700,
     3277,  664,  663,  709,  718,    0, 3412, 3316, 3412, 3315,
     3412, 3314, 3412,    0, 3412, 3273, 3268, 3272, 3270, 3265,
     3255, 3257,    0, 3266, 3258,    0,    0, 3260, 3254, 3252,
     3267,  669, 3254, 3249, 3254, 3239, 3252,  646, 3261,  646,

     3247, 3250, 3252, 3251, 3247, 3242,  650, 3252,  643, 3249,
     3243, 3231, 3244, 3229, 3235, 3241,  644,  653,  705, 3231,
        0, 3243, 3224, 3237,  710,  659, 3242, 3228,  701,  711,
      710,  718, 3234, 3231, 3232,  715,    0, 3234, 3219, 3222,
     3217, 3220, 3230, 3222, 3224, 3226, 3215, 3207, 3216, 3211,
     3208, 3221,  718, 3213, 3217,  703,  730,  728, 3200, 3198,
     3205, 3213, 3203, 3209, 3194, 3207, 3210, 3191,  735, 3195,
     3195, 3195, 3203, 3200, 3191, 3204, 3200, 3187, 3179, 3195,
     3190, 3188, 3180, 3187, 3174, 3175, 3178, 3176, 3175, 3184,
     3179, 3167, 3181, 3164,  729,  768, 3169,  742,    0, 3171,

     3161, 3163, 3166,  738, 3167, 3171, 3157,  737, 3156, 3156,
     3169, 3168, 3163, 3166, 3150, 3165,  753,  741, 3161, 3151,
     3167, 3145, 3161,  756, 3154, 3147, 3154, 3141, 3141, 3154,
     3139,  759,  756, 3136, 3135, 3149, 3136, 3147,  754, 3150,
     3147,    0, 3129, 3125, 3142, 3141,    0,    0, 3133,  764,
     3126, 3124, 3143,    0, 3116, 3126, 3130, 3133,  762, 3132,
     3125, 3130,  751, 3115, 3114, 3125, 3117, 3105, 3109, 3119,
      769,  764,  773, 3120, 3108, 3107, 3121, 3116,  770, 3101,
     3106,  599, 3115, 3114,  788, 3103, 3116, 3098,  789, 3094,
      787, 3093,  790, 3105, 3101, 3099, 3090,  785, 3104, 3103,

     3102,  766, 3101, 3086, 3103,  789, 3084,    0, 3084, 3078,
     3080, 3085, 3082, 3075, 3073, 3083, 3078, 3082, 3087, 3090,
      788, 3070, 3086,  810,    0,  792, 3084,  798,  812,  815,
        0, 3082, 3070, 3069, 3064,  477, 3071, 3066, 3068, 3060,
     3065, 3064, 3072, 3051,  808,  813,  818, 3070, 3059,  822,
      821, 3059, 3057, 3062, 3061, 3068, 3050, 3060,  577, 3052,
     3066, 3043,  840, 3040, 3042, 3047, 3049, 3052,  826, 3046,
     3049, 3045, 3039, 3034, 3081, 3063,    0,    0, 3033, 3035,
      831,  862,  869,  873,  869,  890, 3030, 3033, 3046, 3028,
     3031, 3039, 3025, 3024, 3016, 3031, 3020,  862, 3020, 3412,

     3016, 3018, 3021, 3029, 3019, 3014, 3016,  845,    0, 3019,
     3024,    0, 3023,    0, 3022,    0, 3025,    0,    0, 3013,
     3010, 3016,  861, 3011, 3016, 3001, 3005, 3013, 3012,    0,
     3015, 3002,  859,  880, 2993, 3004, 3007,  873,  882, 3006,
     2990, 2989, 2989,    0, 3006, 3001, 2990, 2995,  882,  886,
      881, 2991, 2989, 3000, 2979, 2985, 2973, 2977, 2985, 2977,
     2976, 2979, 2989, 2989, 2989,    0, 2980, 2976,    0,    0,
     2981, 2977, 2972,    0, 2975, 2971, 2967,    0, 2967,    0,
     2962, 2963, 2958, 2952, 2975, 2954, 2954,    0, 2959, 2954,
     2970, 2952, 2955, 2967, 2962,    0, 2946, 2957, 2960,    0,

     2943, 2958, 2941, 2952, 2954, 2949, 2956, 2952,    0, 2935,
     2934, 2935, 2947, 2945, 2949, 2929, 2932, 2935,    0, 2932,
        0, 2946, 2925, 2944, 2922, 2923, 2922, 2915, 2926, 2928,
     2918, 2915,  872, 2933,    0,    0,    0,    0,    0,  889,
        0, 2922, 2926, 2926, 2922, 2928, 2923, 2926,    0, 2924,
        0,    0, 2904,    0, 2915, 2918,    0,    0, 2910,    0,
     2901,  894,    0,    0, 2908, 2900, 2909,    0,  895,    0,
     2901, 2911, 2907,  899, 2913, 2892, 2894, 2906, 2909, 2894,
     2896, 2906, 2888, 2885,    0, 2898, 2895, 2893, 2877, 2888,
     2880, 2883, 2879, 2878, 2873,    0,  903, 2866,    0,    0,

     2865, 2839, 2842, 2836, 2824,    0,    0,  886, 2818, 2800,
     2796, 2782, 2800,    0, 2791, 2783, 2768, 2785, 2778, 2726,
     2735,    0, 2721, 2731,   56,   76,    0,  120,  205,  271,
      435,  535,  654,  780,  822,  837,  858,  904,    0,  896,
      886,  913,  895,  892,  887,  889,  921,  923,  903,  913,
      920,  919,  928,  929,  922,  912,  926,  919,  922,  918,
      921,  929,  921,  937,  941,  935,  942,    0,  941,  931,
      945,  936,  933,  949,  944,  936,  954,  951,  948,  954,
        0,  956,  960,  951,  959,    0,  954,  948,  963,    0,
      956,  966,  968,  963,  964,  973,  953,  958,  978,  960,

      962,  977,    0,  983,  976,  972,  976,  988,  985,  990,
      974,  977,  991,  978,  995,  998,  995,  996,  987,  994,
        0,    0,    0,  985, 1003,  994,  989, 1002,    0,    0,
     1007,  992, 1000, 1008, 1016, 1001,  998, 1004,  998, 1005,
     1018, 1017, 1013, 1006, 1026, 1023, 1023, 1031, 1024, 1028,
     1028, 1018, 1026, 1028, 1037, 1030,    0,    0, 1031,    0,
     1033,    0, 1037, 1038, 1078,    0, 1029, 1041, 3412,    0,
     1048, 1043, 1082, 1083, 1080, 1081, 1035, 1041, 1036,    0,
     1038, 1051, 1050,    0, 1041,    0, 1052, 1053, 1039, 1049,
     1049, 1061,    0, 1063, 1049, 1045, 1064, 1058, 1055, 1059,

        0, 1074,    0,    0, 1072, 1066,    0, 1077, 1080, 1079,
     1066, 1068, 1088, 1068,    0, 1070, 1070, 1077, 1078, 1073,
     1091, 1090, 1091, 1079, 1078, 1096, 1081, 1083, 1093, 1079,
     1090, 1087,    0, 1101,    0, 1087, 1094, 1091, 1097, 1110,
     1103, 1112, 1105, 1100, 1107, 1112, 1103, 1118, 1102, 1109,
     1117, 1124, 1119, 1120, 1117, 1114, 1113, 1110, 1120, 1115,
     1120, 1130, 1127, 1134, 1129, 1133, 1135, 1122, 1137, 1124,
     1139, 1126,    0, 1132, 1127, 1129, 1130, 1145, 1142, 1132,
     1149, 1151,    0, 1136,    0, 1137,    0,    0, 1172,    0,
        0, 1151, 1139,    0, 1156, 1153, 1162, 1144, 1150, 1154,

     1148, 1169, 1165, 1164, 1156,    0, 1160, 1165, 1170, 1156,
     1172, 1173, 1179,    0,    0, 1162, 1162, 1171, 1179, 1163,
     1181, 1167, 1182, 1171, 1170, 1173, 1172, 1181, 1193, 1181,
     1177,    0,    0, 1179, 1178, 1179,    0, 1188, 1189, 1197,
     1185, 1186,    0, 1190, 1185, 1192, 1199, 1193, 1198, 1198,
     1188,    0, 1207, 1196, 1211, 1197, 1203, 1214, 1211,    0,
     1209,    0, 1223,    0, 1209, 1223,    0, 1205, 1218, 1219,
     1211, 1212, 1222, 1224, 1213, 1233, 1226, 1223,    0,    0,
     1226,    0, 1228, 1222, 1240, 1227,    0, 1229,    0, 1229,
     1236, 1227, 1229, 1230, 1231, 1238, 1247, 1240,    0,    0,

     1248,    0,    0,    0, 1239,    0, 1243, 1251, 1255, 1249,
     1255, 1256, 1247, 1265, 1246, 1263, 1263, 1264, 1269, 1253,
     1252, 1270, 1271, 1257,    0, 1262, 1260, 1270, 1275, 1267,
     1263, 1278,    0,    0, 1283, 1269, 1272, 1272, 1273,    0,
     1274, 1269, 1290, 1288, 1284, 1274, 1275, 1295, 1285, 1280,
     1284,    0, 1285, 1289, 1298, 1298,    0, 1295, 1297, 1286,
     1302, 1289, 1304, 1309, 1305, 1306, 1308, 1313, 1300, 1303,
     1311, 1315, 1319, 1303, 1313, 1324, 1305, 1303, 1319, 1320,
     1321, 1330, 1313, 1331, 1317, 1318,    0, 1323,    0, 1330,
     1319, 1327, 1342, 1324, 1342, 1330, 1325, 1334, 1333, 1343,

     1340, 1349, 1346, 1351,    0, 1340, 1345, 1353, 1347, 1353,
     1338,    0, 1354, 1337, 1351, 1349,    0, 1359, 1361,    0,
     1348, 1349,    0, 1367, 1360, 1351, 1356, 1371, 1359, 1373,
     1373, 1362, 1363, 1358,    0,    0, 1376, 1375,    0, 1368,
     1373, 1374,    0, 1379, 1365, 1385, 1368, 1384, 1385, 1371,
     1378, 1373, 1372,    0,    0, 1382,    0,    0,    0, 1393,
        0, 1380, 1385, 1395, 1394, 1398, 1383, 1384, 1384,    0,
     1391,    0, 1404, 1403, 1410, 1390, 1391, 1393, 1394, 1396,
     1398, 1408, 1398, 1399, 1419, 1407, 1402, 1402, 1404,    0,
     1420, 1406, 1428, 1423, 1411, 1419, 1428, 1412, 1421, 1414,

     1433, 1434, 1435, 1427, 1435, 1421, 1424, 1432, 1440,    0,
     1420, 1444, 1439, 1430, 1435, 1446, 1448, 1450,    0, 1442,
     1454, 1453,    0,    0, 1452, 1439,    0, 1455,    0, 1453,
     1456,    0, 1453,    0, 1449,    0, 1459, 1466, 1446,    0,
        0,    0,    0, 1453,    0, 1444, 1454, 1458, 1453, 1454,
        0,    0, 1470, 1456,    0, 1457, 1467, 1472, 1472, 1480,
        0, 1461,    0, 1469, 1473, 1484, 1472, 1467, 1485, 1469,
     1483, 1474, 1485, 1482,    0, 1487, 1478, 1487, 1488,    0,
        0, 1478, 1488, 1493, 1484, 1476, 1492, 1503, 1489, 1499,
     1482, 1480, 1503, 1503, 1488, 1508,    0, 1506, 1507, 1504,

     1509, 1492, 1517, 1513,    0, 1510, 1505, 1516, 1521, 1511,
     1505, 1505, 1506, 1512,    0, 1526, 1529,    0, 1512, 1506,
     1532, 1529, 1530,    0, 1524, 1528, 1520, 1540, 1526, 1526,
     1533, 1538, 1522, 1520, 1541, 1526, 1529, 1544, 1532, 1538,
     1535, 1550, 1537, 1535, 1545, 1557, 1546,    0, 1549, 1547,
     1558,    0,    0,    0, 1550,    0, 1564, 1561, 1566, 1563,
     1569, 1566, 1569,    0, 1574, 1569,    0, 1572,    0, 1571,
     1556, 1560, 1571, 1569, 1583, 1584, 1564,    0, 1576, 1566,
     1578,    0, 1574, 1566,    0,    0,    0, 1576, 1576,    0,
        0,    0,    0, 1580, 1585, 1575, 1590, 1590, 1592, 1596,

     1601, 1600, 1585, 1595, 1600, 1586, 1593, 1595,    0, 1609,
        0, 1612, 1607, 1605,    0, 1595, 1610, 1596, 1597, 1609,
     1615, 1615, 1616, 1623, 1620, 1608, 1625, 1625, 1628, 1629,
     1616, 1612, 1609, 1621, 1633, 1619, 1618, 1630, 1626, 1620,
     1630, 1638, 1643,    0, 1631,    0, 1641,    0, 1642, 1635,
     1644, 1630, 1638,    0, 1636, 1640, 1653, 1637, 1644, 1654,
     1651, 1652, 1661, 1640, 1647, 1645, 1649, 1653, 1664,    0,
        0, 1647, 1660,    0,    0, 1660, 1667, 1666, 1673,    0,
        0,    0,    0, 1669, 1675,    0, 1670,    0, 1663, 1659,
     1673,    0, 1664, 1674,    0,    0, 1676,    0, 1673, 1664,

     1679, 1670, 1677, 1682, 1680, 1671,    0, 1686,    0,    0,
     1693, 1679,    0, 1689, 1690, 1692, 1695, 1693, 1681, 1682,
     1680, 1687, 1702,    0,    0, 1705,    0, 1700,    0, 1707,
     1702, 1694, 1689, 1692,    0,    0, 1691, 1707, 1693,    0,
     1710,    0,    0, 1710,    0, 1701,    0, 1713, 1699,    0,
        0, 1699, 1706,    0, 1696, 1709, 1708,    0, 1715, 1722,
     1723, 1718, 1709,    0, 1730, 1710, 1718,    0,    0, 1720,
        0, 1715, 1716, 1734, 1722,    0, 1735, 1734,    0, 1731,
     1728,    0, 1740, 1723, 1729, 1744, 1735, 1732, 1732, 1748,
     1753, 1737, 1752, 1746, 1745, 1756, 1765, 1763, 1753,    0,

     1749, 1756, 1751, 1757, 1764, 1754, 1762,    0, 1757,    0,
     1773, 1758,    0, 1762, 1762, 1777, 1771,    0,    0, 1759,
        0, 1770, 1782, 1783,    0,    0, 1774, 1774,    0, 1785,
        0, 1784, 1774, 1781, 1775,    0, 1783, 1787,    0,    0,
     1791, 1793, 1785, 1797, 1786, 1794, 1796,    0, 1795, 1803,
        0, 1786,    0, 1795,    0, 1788, 1790, 1806, 1812,    0,
     1801,    0, 1799, 1801, 1801, 1811, 1803,    0, 1805, 1794,
     1798, 1806, 1796, 1824, 1810, 1805, 1806,    0, 1824, 1823,
     1814, 1831, 1825, 1824, 1830, 1831, 1823, 1831, 1838, 1822,
     1834, 1831, 1834, 1821, 1838, 1843, 1829,    0, 1826, 1828,

        0,    0, 1840, 1836,    0, 1832,    0, 1831, 1845, 1853,
     1854, 1838, 1845, 1838, 1846, 1858,    0, 1841, 1855, 1843,
     1845, 1860, 1846, 1862, 1862, 1864,    0, 1858,    0, 1867,
        0,    0, 1853, 1868, 1869,    0, 1859, 1858, 1876, 1873,
     1874,    0, 1861, 1862, 1880, 1871,    0, 1870, 1873, 1874,
     1882, 1875, 1867, 1872, 1877, 1880,    0, 1879, 1876,    0,
     1886,    0, 1882, 1882, 1897, 1895, 1885, 1896, 1888, 1889,
     1889, 1891, 1892,    0,    0, 1903, 1907, 1890,    0,    0,
        0,    0,    0, 1895, 1891, 1898, 1893, 1913, 1890, 1910,
        0, 1908, 1909, 1894, 1902,    0, 1916,    0,    0, 1908,

        0, 1916,    0,    0, 1923, 1926, 1914, 1914, 1912, 1910,
     1917, 1928, 1929, 1916, 1927, 1932,    0, 1939, 1934, 1936,
     1927, 1931,    0, 1929, 1939,    0,    0, 1927, 1925, 1938,
     1933, 1944, 1945, 1936, 1951, 1948, 1949, 1936, 1951, 1948,
        0,    0, 1938, 1960,    0, 1946, 1942, 1939, 1944, 1950,
     1947,    0, 1960, 1965,    0, 1966, 1958, 1948, 1956,    0,
     1970, 1977, 1961,    0, 1955,    0, 1967, 1961, 1967,    0,
     1973,    0, 1969,    0, 1979, 1980, 1977,    0, 1962, 1968,
     1983,    0, 1970, 1986, 1985, 1975,    0, 1968, 1983, 1987,
        0,    0, 1972, 1999, 1980,    0, 1980, 2000, 1982,    0,

     2002, 1995,    0, 2000, 1988, 2006, 1987,    0,    0,    0,
        0, 1991, 1992, 1993, 2007, 2008, 2015, 2014, 2004, 2016,
     2014, 1999,    0, 2006,    0, 2001, 2005, 2011, 2010, 2025,
     2029, 2030, 2010, 2025,    0, 2015, 2030, 2023, 2035, 2015,
     2036, 2037, 2027,    0,    0,    0, 2035,    0,    0, 2025,
     2042, 2041,    0, 2036,    0, 2034,    0, 2031,    0, 2026,
     2049, 2034,    0,    0, 2034, 2050, 2044, 2037,    0, 2053,
        0,    0, 2054, 2055, 2057, 2057, 2062,    0, 2057,    0,
     2047, 2053,    0, 2053, 2064, 2049,    0, 2056, 2051, 2052,
     2072, 2065, 2056, 2063,    0, 2058, 2073, 2075, 2075, 2060,

     2083, 2074, 2065, 2082,    0, 2071,    0,    0, 2061, 2073,
     2069, 2087, 2073, 2077, 2073, 2080, 2091, 2078, 2088, 2076,
     2079, 2093, 2102,    0,    0, 2103, 2096, 2085, 2096, 2086,
     2093, 2094, 2097, 2109, 2092, 2105, 2094, 2096, 2095, 2098,
     2105, 2113, 2116, 2115, 2116, 2119, 2121,    0, 2104, 2120,
     2112,    0, 2124, 2125, 2110, 2110, 2124, 2118, 2115, 2114,
        0, 2120, 2111,    0, 2128, 2120,    0, 2120,    0, 2121,
        0, 2136, 2137,    0, 2124, 2145, 2140, 2141, 2143, 2134,
     2137, 2132, 2127,    0, 2133,    0, 2141, 2152,    0,    0,
     2154, 2138, 2159, 2154, 2155, 2143,    0, 2156, 2160, 2165,

     2161, 2165, 2152, 2159, 2148, 2165, 2166, 2167, 2164, 2168,
     2161, 2158, 2162, 2163, 2167, 2171, 2167, 2174,    0, 2179,
     2182, 2181, 2182,    0,    0, 2184, 2188, 2175, 2186,    0,
     2188,    0, 2173, 2175,    0, 2176,    0, 2179, 3412, 2177,
     2191,    0,    0, 2187, 2202, 2188, 2190, 2195, 2192, 2201,
        0,    0,    0,    0,    0, 2208, 2188, 2196, 2205, 2206,
     2207,    0,    0,    0, 2193, 2191, 2203, 2196, 2198, 2195,
     2214, 2208,    0, 2220, 2213, 2204, 2219, 2221,    0, 2204,
     2201, 2223, 2221, 2210, 2224, 2213,    0, 2213, 2214, 2220,
     2232, 2223, 2237, 2221, 2220, 2242, 2223, 2223, 2226, 2223,

     2247, 2229, 2228, 2230, 2231, 2236,    0,    0, 2228, 2249,
     2236, 2240, 2236,    0, 2242, 2243,    0, 2244, 2242,    0,
     2247,    0,    0,    0, 2242,    0, 2245,    0, 2258, 2264,
        0,    0, 2252,    0, 2250, 2255,    0, 2264, 2252, 2259,
     2267, 2266, 2276, 2257, 2278, 2263, 2272, 2263,    0, 2257,
     2262, 2270, 2271, 2285, 2284, 2283, 2288, 2275,    0, 2292,
     2283, 2281,    0, 2278, 2280, 2278, 2282, 2280, 2288,    0,
        0,    0, 2296, 2292, 2288, 2299, 2286, 2287, 2305, 2302,
     2299, 2293,    0, 2305, 2292, 2305, 2308, 2300, 2314,    0,
     2313, 2312, 2313, 2301,    0, 2317, 2313, 2304, 2318, 2315,

        0,    0,    0, 2313, 2306, 2308, 2324,    0,    0, 2325,
     2326,    0, 2318, 2325, 2315, 2327, 2336, 2313, 2340,    0,
     2335, 2316, 2322,    0, 2337, 2321,    0, 2320, 2341, 2344,
        0, 2339, 2350, 2351, 2337, 2332,    0, 2339, 2342, 2339,
     2344,    0, 2360, 2356, 2354,    0, 2363, 2354, 2349, 2361,
        0, 2355,    0,    0, 2353, 2364, 2352, 2351, 2352, 2366,
     2353, 2357, 2355, 2372, 2373,    0, 2361, 2359, 2361, 2364,
     2368, 2373, 2367, 2372, 2369, 2369, 2384,    0, 2381, 2382,
     2378,    0, 2374, 2390, 2389,    0,    0, 2397, 2394, 2385,
     2381, 2386, 3412, 2387, 2393, 2383,    0,    0, 2384, 2404,

     2405, 2404,    0, 2389,    0, 2394,    0, 2401,    0, 2408,
     2407,    0, 2388, 2411, 2397,    0, 2412, 2413, 2409, 2393,
     2407,    0, 2405, 2419,    0, 2421, 2415, 2410, 2411, 2428,
     2410, 2428, 2425, 2426, 2417, 2418, 2419, 2422,    0, 2419,
     2435, 2431,    0, 2439,    0,    0, 2423, 2431, 2425,    0,
     2426, 2428,    0,    0, 2439, 2430, 2430, 2439, 2447, 2439,
        0, 2435,    0, 2435, 2448, 2437, 2444,    0,    0,    0,
     2454, 2440, 2462, 2448, 2456, 2445, 2444,    0, 2460, 2448,
     2463, 2453,    0, 2463, 2451, 2446, 2465,    0, 2454, 2462,
     2468, 2457, 2464, 2459,    0, 2477,    0, 2466, 2483,    0,

     2464, 2480, 2480, 2470, 2472, 2468, 2484, 2478, 2472, 2474,
     2490, 2495, 2479, 2478, 2481, 2486, 2474, 2482, 2487, 2497,
     2498, 2499, 2500,    0, 2492, 2498, 2499, 2504,    0, 2490,
     2506, 2508, 2514, 2505, 2495, 2497, 2513, 2497, 2514,    0,
     2515, 2517, 2519, 2518, 2508,    0, 2516,    0, 2513,    0,
     2518, 2509,    0,    0,    0, 2524,    0, 2529, 2526, 2527,
     2532, 2530, 2530, 2516, 2523, 2529,    0, 2520,    0,    0,
     2521, 2542, 2541, 2538,    0, 2540, 2530, 2537, 2546, 2528,
     2541, 2534,    0, 2542, 2533, 2535, 2536, 2552, 2553, 2550,
     2544, 2533,    0, 2559, 2558, 2543, 2556, 2560,    0, 2544,

     2567, 2555,    0, 2550,    0, 2568, 2556, 2570, 2558,    0,
     2547,    0,    0, 2562,    0, 2562, 2563,    0,    0, 2568,
     2574, 2575,    0, 2571, 2563, 2562,    0,    0, 2562, 2580,
     2565,    0, 2581, 2586, 2582, 2590, 2591, 2592, 2572, 2578,
        0, 2582, 2590, 2576, 2582,    0, 2597, 2580, 2588, 2583,
     2582,    0, 2591, 2584, 2598,    0, 2601, 2592, 2607, 2593,
     2595,    0, 2592, 2592, 2608, 2615, 2601,    0, 2608, 2599,
     2598, 2594, 2604, 2613, 2614, 2614, 2610, 2610,    0, 2621,
     2613, 2612,    0, 2609, 2615,    0, 2628,    0, 2627,    0,
     2626,    0,    0, 2620,    0, 2626, 2616, 2621, 2618,    0,

        0, 2631, 2641, 2636, 2627, 2628, 2629, 2641, 2639, 2648,
     2644, 2630,    0, 2627,    0, 2632,    0,    0, 2637, 2635,
     2649,    0,    0, 2636, 2638, 2636, 2637, 2645,    0,    0,
     2641,    0,    0, 2642,    0, 2648, 2638, 2646, 2660, 2667,
     2649, 2650, 2650, 2645,    0,    0,    0, 2662, 2654, 2665,
        0,    0,    0, 2661, 2660, 2654, 2662,    0, 2674, 2674,
     2659,    0, 2663, 2664, 2684,    0, 2681, 2680, 2668, 2667,
        0, 3412, 2725, 2737, 2749, 2761, 2768, 2769, 2774, 2786,
     2798, 2810, 2818, 2819, 2827, 2828, 2840, 2852, 2864, 2869,
     2881, 2893, 2901, 2909, 2921

    } ;

static yyconst short int yy_def[2996] =
    {   0,
     2972,    1, 2973, 2973,    1,    1, 2972, 2972, 2972, 2972,
     2972, 2974, 2975, 2972, 2972, 2976, 2972, 2972, 2972, 2972,
     2972, 2977, 2978, 2972, 2977,   25, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2972, 2972, 2972, 2972, 2972, 2972, 2974, 2972, 2972,
     2980, 2975, 2972, 2972, 2976, 2972, 2972, 2981, 2982, 2978,
       25, 2978, 2983, 2972, 2984, 2972, 2985, 2986, 2972, 2972,
     2972, 2972, 2972, 2972, 2987, 2988, 2989,   35, 2972, 2972,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2972, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2990,
     2979, 2979, 2979, 2979, 2979, 2979, 2972, 2972, 2991, 2974,
     2974, 2980, 2992, 2976, 2976, 2981, 2982, 2972, 2972, 2972,
     2984, 2993, 2972, 2972, 2972, 2986, 2972, 2987, 2972, 2988,
     2972, 2989, 2972,  100, 2972, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2972, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2990, 2979, 2979, 2979, 2979, 2979,
     2994, 2991, 2995, 2992, 2972, 2972, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2972,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2972, 2979,
     2979, 2979, 2991, 2994, 2992, 2995, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2972, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2972, 2972, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2972, 2972, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2972, 2972, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2972, 2972,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2972, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2972, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,

     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979, 2979,
     2979,    0, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972

    } ;

static yyconst short int yy_nxt[3479] =
    {   0,
        8,    9,   10,    9,   11,   12,   13,   14,   15,   16,
       17,   18,   19,   20,   21,   22,   23,   24,   25,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   28,   29,
       30,   31,   32,   33,    8,   34,    8,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,
       58,   59,   60,   61,   62,   63,   65,   65,   69,   79,
       80,   70,   76, 2972, 2972,   85,   66,   66,  232,   77,
       90,   91,   92,   93,   94,   95,  233,  166,  128,   96,
      149,  167,  129, 2972, 1193, 2972,  130,  150,   86,  120,

       71,   87,  131,  151,   78,  132,  121,  122,  133,  259,
      123,  259,  134,  124,  125, 2972,  126,   97, 1194,  127,
       88,   98,   98,   99,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98, 1195,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,   98,   98,  102,  103,  112,
      104,  105,   69,  152,  456,   70,  106,  153,  107,  263,

      263,  154,  135,  108,  109,  110,  111,  155,   69,  457,
      264,  251,  264,  136,  288,  137,  289,  309,  113,  138,
      139,  310,  114,  140,   71,  141,  115,  142,  228,  116,
      229,  143,  117,  230,  231,  144,  369,  118,  145,  370,
      252,  146,  119,  156,  147,  157,  158,  148,  292,  292,
      276, 1196,  159,  160,  161,  162,  168,  172,  163,  164,
      169,  173,  280,  367,  170,  174,   76,  277,  281,  368,
      171,  175,  178,   77,  179,  180,  181,  176,  372,  185,
      373,  177,  385,   76,  386,  186,  182,  187,  192,  188,
      255,  189,  183,  184,  190,  193,  191,  285,   78,  194,

      286,  301,  195,  199,  326,  196,  302,  200,  197,  327,
      312,  201,  234, 1197,  202,  256,  235,  203,  313,  236,
      237,  287,  204,  205,  314,  206,  238,  207,   77,  239,
      208,  209,  294,  295,  210,  211,  212,  213,  214,  215,
      240,  216,  217,  218,  221,  219,  296,  220,  222,  297,
      282,  223,  224,  583,  241,  283,  298,  305,  225,  324,
      322,  226,  299,  284,  340,  354,  306,  355,  227,  242,
      323,  356,  380,  307,  308,  325,  341,  381,  357,  342,
      382,  243,  358,  244,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   99,   98,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,  274,  274,
      274,  274,  274,  274,  274,  274,  274,   98,   98,   98,
       98,   98,   98,   98,   98,   98,  274,  275,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,  274,  274,  274,  274,  274,  274,
      274,  274,  274,  274,   98,   98,  315,  359,  378,  316,
      328, 1198,  329,  334,  360,  330,  361,  317,  318,  319,
      400,  331,  379,  522,  401,  363,  320,  523,  332,  333,

      335,  336,  364,  346,  337,  347,  348,  406,  365,  349,
      374,  375,  407,  435,  366,  390,  376,  391,  916,  408,
      392,  436,  438,  350,  409,  393,  394,  422,  423,  439,
      395,  396,  424,  397,  917,  433,  412,  410,  413,  414,
      411,  416,  425,  417,  415,  434,  541,  418,  429,  430,
      542,  426,  431,  444,  419,  420,  427,  428,  445,  432,
      442,  443,  454,  421,  449,  450,  461,  512,  446,  455,
      462,  543,  544,  513,  447,  467,  471,  448,  468,  475,
      472,  463,  464,  476,  469,  470,  473,  477,  479,  480,
      481,  482,  556,  483,  484,  557,  514, 1199,  509,  485,

      486,  487,  488,  489,  490,  496,  491,  492,  502,  493,
      515,  567,  510,  947,  497,  568,  498,  503,  511,  504,
      518,  505,  530,  506,  507,  508,  526,  534,  562,  527,
      519,  520,  948,  531,  563,  535,  532,  538,  521,  533,
      528,  545,  539,  529,  565,   70,  549,  550,  540,  546,
      573,  842,  551,  566,  552,  553,  558,  843,  574,   76,
      559,  547,  554,  555,  560,  569,   77,   69,   69,  570,
       70,  582,   69,   76,  581,  251,   76,  585,  600,  585,
      584,  263,  263,  255,  606,  609,  610,  292,  292,  621,
      617,   78,  618,  631,  622,  607, 1200,  649,  623,   71,

       71,  650,  632,  633,  252,   78,  634,  619,  256,  260,
      260,  260,  260,  260,  260,  260,  260,  260,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  265,  265,  265,
      265,  265,  265,  265,  265,  265,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  635,  636,  653,  657,  655,
      654,  645,  658,  664,  659,  665,  637,  656,  660,  687,
      688,  638,  639,  666,  640,  646,  647,  648,  689,  683,
      693,  733,  667,  684,  750,  705,  690,  706,  755,  691,
      743,  744,  692,  694,  767,  707,  734,  735,  736,  737,
      738,  765,  774,  739,  751,  783,  756,  768,  785,  745,

      792,  766,  786,  801,  810,  811,  802,  815,  816,  824,
      740,  838,  793,  830,  828,  775,  831,  784,  872,  839,
      741,  867,  825,  829,  873,  826,  846,  852,  827,  856,
      847,  853,  861,  857,  832,  877,  582, 1201,  854,  892,
      848,  868,  862,  893,  858,  859,  896,  900,  878,  901,
      905,  903,  897,  904,  926,  907,  908,  928,  906,  927,
      930,  936,  909,  929,  934,  974,  898,  582,  910,  931,
      899,  911,  937,  938,  935,  939,  952,  962,  584,  953,
      954,  963,  584,  998, 1202, 1203,  955,  586,  586,  586,
      586,  586,  586,  586,  586,  586,  581,  999,  988, 1009,

     1204, 1019,  956,  976,  989, 1020, 1000,  583,  586,  586,
      586,  586,  586,  586,  586,  586,  586, 1010, 1021, 1027,
     1029, 1040, 1042, 1116, 1030, 1041, 1044, 1117, 1031, 1022,
     1028, 1045, 1134, 1119, 1139, 1023, 1177, 1046, 1178, 1144,
     1205, 1169, 1207, 1043, 1120, 1208, 1211, 1212, 1213, 1209,
     1135, 1214, 1140, 1145, 1146, 1147, 1210, 1148, 1170, 1215,
     1206, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225,
     1226, 1227, 1229, 1230, 1228, 1223, 1231, 1232, 1233, 1234,
     1235, 1237, 1238, 1240, 1241, 1239, 1242, 1244, 1245, 1246,
     1247, 1248, 1249, 1250, 1251, 1243, 1252, 1253, 1254, 1236,

     1256, 1257, 1255, 1258, 1259, 1260, 1261, 1262, 1263, 1264,
     1265, 1266, 1267, 1268, 1272, 1273, 1274, 1275, 1276, 1278,
     1277, 1279, 1280, 1281, 1269, 1282, 1283, 1284, 1285, 1270,
     1271, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
     1296, 1297, 1298, 1301, 1295, 1302, 1303, 1304, 1305, 1299,
     1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1309,
     1300, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324,
     1326, 1327, 1329, 1330, 1328, 1331, 1332, 1333, 1334, 1335,
     1336, 1337, 1338, 1339, 1340, 1325, 1341,   70,  582,   77,
      584, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1350, 1351,

     1352, 1353, 1354, 1355, 1349, 1356, 1357, 1358, 1359, 1360,
     1361, 1362, 1363, 1364,  583,  976,  581,  974, 1365, 1366,
     1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1396,
     1397, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1410, 1411, 1412, 1413, 1414, 1409, 1415, 1398, 1416,
     1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426,
     1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435, 1436,
     1437, 1439, 1440, 1441, 1442, 1444, 1445, 1443, 1446, 1447,

     1448, 1449, 1450, 1451, 1452, 1453, 1438, 1454, 1455, 1456,
     1457, 1459, 1460, 1461, 1462, 1463, 1458, 1464, 1465, 1466,
     1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476,
     1477, 1478, 1479, 1480, 1481, 1482, 1483, 1484, 1485, 1486,
     1487, 1488, 1489, 1490, 1491, 1492, 1493, 1495, 1496, 1494,
     1497, 1498, 1499, 1500, 1501, 1502, 1503, 1504, 1506, 1508,
     1509, 1510, 1507, 1511, 1512, 1513, 1514, 1515, 1516, 1517,
     1518, 1519, 1520, 1505, 1521, 1522, 1523, 1524, 1525, 1527,
     1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536, 1538,
     1539, 1540, 1542, 1543, 1544, 1545, 1546, 1526, 1547, 1541,

     1548, 1549, 1551, 1537, 1552, 1553, 1554, 1555, 1556, 1557,
     1558, 1559, 1560, 1561, 1550, 1562, 1563, 1564, 1565, 1566,
     1567, 1568, 1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576,
     1577, 1578, 1579, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
     1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
     1597, 1600, 1601, 1602, 1598, 1605, 1603, 1606, 1607, 1608,
     1610, 1611, 1612, 1613, 1614, 1615, 1599, 1604, 1616, 1609,
     1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624, 1625, 1627,
     1628, 1629, 1630, 1631, 1632, 1633, 1634, 1635, 1636, 1637,
     1638, 1639, 1640, 1641, 1642, 1643, 1644, 1645, 1626, 1646,

     1647, 1648, 1649, 1650, 1651, 1652, 1653, 1654, 1655, 1656,
     1657, 1658, 1659, 1661, 1662, 1663, 1664, 1666, 1667, 1668,
     1669, 1670, 1671, 1672, 1660, 1673, 1674, 1675, 1676, 1677,
     1678, 1665, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686,
     1687, 1688, 1689, 1690, 1691, 1692, 1694, 1696, 1697, 1693,
     1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707,
     1708, 1709, 1710, 1711, 1712, 1713, 1695, 1714, 1715, 1716,
     1717, 1718, 1719, 1720, 1722, 1723, 1724, 1725, 1726, 1727,
     1728, 1729, 1730, 1731, 1721, 1732, 1733, 1734, 1735, 1736,
     1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746,

     1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756,
     1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766,
     1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776,
     1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786,
     1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1797, 1798,
     1799, 1800, 1801, 1802, 1795, 1803, 1804, 1805, 1806, 1807,
     1808, 1809, 1810, 1811, 1812, 1796, 1813, 1814, 1815, 1816,
     1817, 1819, 1820, 1821, 1822, 1823, 1824, 1826, 1827, 1828,
     1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1818, 1837,
     1838, 1839, 1840, 1841, 1842, 1843, 1825, 1844, 1845, 1847,

     1848, 1849, 1850, 1851, 1852, 1853, 1846, 1854, 1855, 1856,
     1857, 1860, 1861, 1862, 1863, 1864, 1858, 1865, 1866, 1867,
     1869, 1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878,
     1859, 1879, 1880, 1881, 1882, 1883, 1884, 1886, 1887, 1868,
     1888, 1889, 1890, 1891, 1892, 1885, 1893, 1894, 1897, 1898,
     1899, 1900, 1901, 1902, 1903, 1904, 1905, 1906, 1907, 1908,
     1909, 1911, 1895, 1912, 1913, 1896, 1914, 1915, 1916, 1917,
     1918, 1910, 1919, 1920, 1921, 1922, 1923, 1924, 1925, 1926,
     1927, 1928, 1929, 1930, 1931, 1932, 1933, 1934, 1935, 1936,
     1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944, 1945, 1946,

     1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
     1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964, 1966, 1967,
     1968, 1969, 1970, 1971, 1972, 1965, 1973, 1974, 1975, 1976,
     1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984, 1985, 1986,
     1987, 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, 1996,
     1997, 1998, 1999, 2000, 2001, 2002, 2003, 2004, 2005, 2006,
     2007, 2008, 2009, 2011, 2012, 2013, 2014, 2015, 2016, 2017,
     2018, 2019, 2020, 2010, 2021, 2022, 2023, 2024, 2025, 2026,
     2027, 2028, 2029, 2030, 2031, 2032, 2039, 2040, 2041, 2033,
     2042, 2043, 2044, 2034, 2045, 2046, 2047, 2035, 2048, 2036,

     2037, 2049, 2038, 2050, 2051, 2052, 2053, 2055, 2056, 2059,
     2057, 2060, 2054, 2058, 2061, 2062, 2063, 2064, 2065, 2066,
     2067, 2068, 2069, 2070, 2071, 2072, 2073, 2074, 2075, 2076,
     2077, 2078, 2079, 2080, 2081, 2082, 2083, 2084, 2085, 2086,
     2087, 2088, 2089, 2090, 2091, 2092, 2093, 2094, 2095, 2096,
     2097, 2098, 2099, 2100, 2101, 2102, 2103, 2104, 2105, 2106,
     2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115, 2116,
     2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125, 2126,
     2127, 2128, 2129, 2131, 2132, 2130, 2133, 2134, 2135, 2136,
     2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145, 2146,

     2147, 2148, 2149, 2150, 2151, 2152, 2153, 2154, 2155, 2156,
     2157, 2158, 2159, 2160, 2161, 2162, 2163, 2164, 2165, 2166,
     2167, 2168, 2169, 2170, 2171, 2172, 2173, 2174, 2175, 2176,
     2177, 2178, 2179, 2180, 2181, 2182, 2183, 2184, 2185, 2186,
     2187, 2188, 2189, 2190, 2191, 2194, 2195, 2196, 2197, 2198,
     2199, 2200, 2201, 2202, 2203, 2204, 2205, 2206, 2207, 2208,
     2192, 2193, 2209, 2210, 2211, 2212, 2213, 2214, 2215, 2216,
     2217, 2218, 2219, 2220, 2221, 2222, 2223, 2224, 2225, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2236, 2237,
     2239, 2240, 2242, 2243, 2244, 2245, 2246, 2235, 2247, 2248,

     2249, 2250, 2251, 2238, 2252, 2241, 2253, 2254, 2255, 2256,
     2257, 2258, 2259, 2260, 2261, 2262, 2263, 2264, 2265, 2266,
     2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275, 2276,
     2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285, 2286,
     2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295, 2296,
     2297, 2298, 2299, 2300, 2301, 2302, 2309, 2310, 2311, 2303,
     2312, 2313, 2314, 2315, 2304, 2316, 2317, 2318, 2305, 2319,
     2306, 2320, 2321, 2322, 2307, 2323, 2308, 2324, 2325, 2326,
     2327, 2328, 2329, 2330, 2331, 2332, 2333, 2334, 2335, 2336,
     2337, 2338, 2339, 2340, 2341, 2342, 2343, 2344, 2345, 2346,

     2347, 2348, 2349, 2350, 2351, 2352, 2353, 2354, 2355, 2356,
     2357, 2358, 2359, 2360, 2361, 2362, 2363, 2364, 2365, 2366,
     2367, 2368, 2369, 2370, 2371, 2372, 2373, 2374, 2375, 2376,
     2377, 2378, 2379, 2380, 2381, 2382, 2383, 2384, 2385, 2386,
     2387, 2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396,
     2397, 2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406,
     2407, 2408, 2409, 2410, 2411, 2412, 2413, 2414, 2415, 2416,
     2417, 2418, 2419, 2420, 2421, 2423, 2424, 2425, 2426, 2427,
     2428, 2429, 2430, 2431, 2422, 2432, 2433, 2434, 2435, 2436,
     2437, 2438, 2439, 2440, 2441, 2442, 2443, 2444, 2445, 2446,

     2447, 2448, 2449, 2450, 2451, 2452, 2454, 2455, 2456, 2457,
     2458, 2453, 2459, 2460, 2461, 2462, 2463, 2464, 2465, 2466,
     2467, 2468, 2469, 2470, 2471, 2472, 2473, 2475, 2476, 2474,
     2477, 2478, 2479, 2480, 2481, 2482, 2483, 2484, 2485, 2486,
     2487, 2488, 2489, 2490, 2491, 2492, 2493, 2494, 2495, 2496,
     2497, 2498, 2499, 2500, 2501, 2502, 2503, 2504, 2505, 2506,
     2507, 2508, 2509, 2510, 2511, 2512, 2513, 2514, 2515, 2516,
     2517, 2518, 2519, 2520, 2521, 2522, 2523, 2524, 2525, 2526,
     2527, 2528, 2529, 2530, 2531, 2532, 2533, 2534, 2535, 2536,
     2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546,

     2547, 2548, 2550, 2551, 2552, 2553, 2554, 2555, 2556, 2557,
     2558, 2549, 2560, 2561, 2562, 2563, 2559, 2564, 2565, 2566,
     2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576,
     2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586,
     2587, 2588, 2589, 2590, 2591, 2592, 2593, 2594, 2595, 2596,
     2597, 2598, 2599, 2600, 2603, 2604, 2605, 2606, 2607, 2608,
     2609, 2610, 2611, 2612, 2601, 2613, 2614, 2615, 2616, 2602,
     2617, 2618, 2619, 2620, 2621, 2622, 2623, 2624, 2625, 2626,
     2627, 2629, 2630, 2631, 2632, 2635, 2636, 2637, 2638, 2639,
     2628, 2640, 2633, 2641, 2642, 2643, 2644, 2645, 2646, 2647,

     2648, 2649, 2650, 2634, 2651, 2652, 2653, 2654, 2655, 2656,
     2657, 2658, 2659, 2660, 2661, 2662, 2663, 2664, 2665, 2666,
     2667, 2668, 2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676,
     2677, 2678, 2679, 2680, 2681, 2682, 2683, 2684, 2685, 2686,
     2687, 2688, 2689, 2690, 2691, 2692, 2693, 2694, 2695, 2696,
     2697, 2698, 2699, 2700, 2701, 2702, 2703, 2704, 2705, 2706,
     2707, 2708, 2709, 2710, 2711, 2712, 2713, 2717, 2718, 2719,
     2714, 2720, 2721, 2722, 2715, 2723, 2724, 2725, 2726, 2727,
     2728, 2729, 2730, 2716, 2731, 2732, 2733, 2734, 2735, 2736,
     2737, 2738, 2739, 2740, 2741, 2742, 2743, 2744, 2745, 2746,

     2747, 2748, 2749, 2750, 2751, 2752, 2753, 2754, 2755, 2756,
     2757, 2758, 2759, 2760, 2761, 2762, 2763, 2764, 2765, 2766,
     2767, 2768, 2769, 2770, 2771, 2772, 2773, 2774, 2775, 2776,
     2777, 2778, 2779, 2780, 2781, 2782, 2783, 2784, 2785, 2786,
     2787, 2788, 2789, 2790, 2791, 2792, 2793, 2794, 2795, 2796,
     2797, 2798, 2799, 2800, 2801, 2802, 2803, 2804, 2805, 2806,
     2807, 2808, 2809, 2810, 2811, 2812, 2813, 2814, 2815, 2816,
     2817, 2818, 2819, 2820, 2821, 2822, 2823, 2824, 2825, 2826,
     2827, 2828, 2829, 2830, 2831, 2832, 2833, 2834, 2835, 2836,
     2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845, 2846,

     2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855, 2856,
     2857, 2858, 2859, 2860, 2861, 2862, 2863, 2864, 2865, 2866,
     2867, 2868, 2869, 2870, 2871, 2872, 2873, 2874, 2875, 2876,
     2877, 2878, 2879, 2880, 2881, 2882, 2883, 2884, 2885, 2886,
     2887, 2888, 2889, 2890, 2891, 2892, 2893, 2894, 2895, 2896,
     2897, 2898, 2899, 2900, 2901, 2902, 2903, 2904, 2905, 2906,
     2907, 2908, 2909, 2910, 2911, 2912, 2913, 2914, 2915, 2916,
     2917, 2918, 2919, 2920, 2921, 2922, 2923, 2924, 2925, 2926,
     2927, 2928, 2929, 2930, 2931, 2932, 2933, 2934, 2935, 2936,
     2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2945, 2946,

     2947, 2948, 2949, 2950, 2951, 2952, 2953, 2954, 2955, 2956,
     2957, 2958, 2959, 2960, 2961, 2962, 2963, 2964, 2965, 2966,
     2967, 2968, 2969, 2970, 2971,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   75,   75,   75,   75,   75,   75,   75,   75,   75,
       75,   75,   75,   81,   81,   81,   82, 1192, 1191, 1190,
       82,  101,  101, 1189,  101,  101,  250,  250,  250,  250,
      250,  250,  250,  250,  250,  250,  250,  250,  254,  254,

      254,  254,  254,  254,  254,  254,  254,  254,  254,  254,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,
      257,  257,  260,  260, 1188,  260,  261, 1187, 1186, 1185,
      261,  265,  265, 1184,  265,  266, 1183, 1182,  266,  266,
      268,  268, 1181,  268,  268,  268,  268,  268,  268,  268,
      268,  268,  270,  270,  270, 1180,  270,  270,  270,  270,
      270,  270,  270,  270,  272,  272,  272,  272,  272,  272,
      272,  272,  272, 1179,  272,  272,  575, 1176, 1175,  575,
      575,  249, 1174,  249,  249,  249,  249,  249,  249,  249,
      249,  249,  249,  253, 1173,  253,  253,  253,  253,  253,

      253,  253,  253,  253,  253,  586,  586, 1172,  586,  973,
     1171,  973,  973,  973,  973,  973,  973,  973,  973,  973,
      973,  975, 1168,  975,  975,  975,  975,  975,  975,  975,
      975,  975,  975, 1167, 1166, 1165, 1164, 1163, 1162, 1161,
     1160, 1159, 1158, 1157, 1156, 1155, 1154, 1153, 1152, 1151,
     1150, 1149, 1143, 1142, 1141, 1138, 1137, 1136, 1133, 1132,
     1131, 1130, 1129, 1128, 1127, 1126, 1125, 1124, 1123, 1122,
     1121, 1118, 1115, 1114, 1113, 1112, 1111, 1110, 1109, 1108,
     1107, 1106, 1105, 1104, 1103, 1102, 1101, 1100, 1099, 1098,
     1097, 1096, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088,

     1087, 1086, 1085, 1084, 1083, 1082, 1081, 1080, 1079, 1078,
     1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070, 1069, 1068,
     1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060, 1059, 1058,
     1057, 1056, 1055, 1054, 1053, 1052, 1051, 1050, 1049, 1048,
     1047, 1039, 1038, 1037, 1036, 1035, 1034, 1033, 1032, 1026,
     1025, 1024, 1018, 1017, 1016, 1015, 1014, 1013, 1012, 1011,
     1008, 1007, 1006, 1005, 1004, 1003, 1002, 1001,  997,  996,
      995,  994,  993,  992,  991,  990,  987,  986,  985,  984,
      983,  982,  981,  980,  979,  978,  977,  972,  971,  970,
      969,  968,  967,  966,  965,  964,  961,  960,  959,  958,

      957,  951,  950,  949,  946,  945,  944,  943,  942,  941,
      940,  933,  932,  925,  924,  923,  922,  921,  920,  919,
      918,  915,  914,  913,  912,  902,  895,  894,  891,  890,
      889,  888,  887,  886,  885,  884,  883,  882,  881,  880,
      879,  876,  875,  874,  871,  870,  869,  866,  865,  864,
      863,  860,  855,  851,  850,  849,  845,  844,  841,  840,
      837,  836,  835,  834,  833,  823,  822,  821,  820,  819,
      818,  817,  814,  813,  812,  809,  808,  807,  806,  805,
      804,  803,  800,  799,  798,  797,  796,  795,  794,  791,
      790,  789,  788,  787,  782,  781,  780,  779,  778,  777,

      776,  773,  772,  771,  770,  769,  764,  763,  762,  761,
      760,  759,  758,  757,  754,  753,  752,  749,  748,  747,
      746,  742,  732,  731,  730,  729,  728,  727,  726,  725,
      724,  723,  722,  721,  720,  719,  718,  717,  716,  715,
      714,  713,  712,  711,  710,  709,  708,  704,  703,  702,
      701,  700,  699,  698,  697,  696,  695,  686,  685,  682,
      681,  680,  679,  678,  677,  676,  675,  674,  673,  672,
      671,  670,  669,  668,  663,  662,  661,  652,  651,  644,
      643,  642,  641,  630,  629,  628,  627,  626,  625,  624,
      620,  616,  615,  614,  613,  612,  611,  608,  605,  604,

      603,  602,  601,  599,  598,  597,  596,  595,  594,  593,
      592,  591,  590,  589,  588,  587,  273,  271,  269,  262,
      258,  580,  579,  578,  577,  576,  572,  571,  564,  561,
      548,  537,  536,  525,  524,  517,  516,  501,  500,  499,
      495,  494,  478,  474,  466,  465,  460,  459,  458,  453,
      452,  451,  441,  440,  437,  405,  404,  403,  402,  399,
      398,  389,  388,  387,  384,  383,  377,  371,  362,  353,
      352,  351,  345,  344,  343,  339,  338,  321,  311,  304,
      303,  300,  293,  291,  290,  279,  278,  273,  271,  269,
      267,  262,   83,   83,  258,  253,   73,  249,  248,  247,

      246,  245,  198,  165,   89,   84,   83,   74,   73,   67,
     2972,    7, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972
    } ;

static yyconst short int yy_chk[3479] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    4,   12,   22,
       22,   12,   16,   26,   25,   25,    3,    4,   57,   16,
       29,   29,   29,   31,   31,   33,   57,   46,   39,   33,
       42,   46,   39,   81,  825,   26,   39,   42,   25,   38,

       12,   25,   39,   42,   16,   39,   38,   38,   39,   83,
       38,   83,   39,   38,   38,   81,   38,   33,  826,   38,
       25,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,  828,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   36,   36,   37,
       36,   36,   68,   43,  188,   68,   36,   43,   36,   86,

       86,   43,   40,   36,   36,   36,   36,   43,   71,  188,
       87,   71,   87,   40,  108,   40,  108,  121,   37,   40,
       40,  121,   37,   40,   68,   40,   37,   41,   56,   37,
       56,   41,   37,   56,   56,   41,  146,   37,   41,  146,
       71,   41,   37,   44,   41,   44,   44,   41,  112,  112,
      102,  829,   44,   44,   44,   44,   47,   48,   44,   44,
       47,   48,  105,  145,   47,   48,   75,  102,  105,  145,
       47,   48,   49,   75,   49,   49,   49,   48,  148,   50,
      148,   48,  155,   78,  155,   50,   49,   50,   51,   50,
       78,   50,   49,   49,   50,   51,   50,  107,   75,   51,

      107,  117,   51,   53,  128,   51,  117,   53,   51,  128,
      123,   53,   58,  830,   53,   78,   58,   53,  123,   58,
       58,  107,   53,   54,  123,   54,   58,   54,  253,   58,
       54,   54,  114,  114,   54,   54,   54,   54,   54,   54,
       59,   54,   54,   54,   55,   54,  114,   54,   55,  115,
      106,   55,   55,  253,   59,  106,  115,  120,   55,  127,
      126,   55,  115,  106,  133,  141,  120,  141,   55,   59,
      126,  141,  152,  120,  120,  127,  133,  152,  141,  133,
      152,   59,  141,   59,   98,   98,   98,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,

       98,   98,   98,   98,   98,   98,   98,   98,   98,   98,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  100,  100,  100,  100,
      100,  100,  100,  100,  100,  100,  124,  142,  151,  124,
      129,  831,  129,  130,  142,  129,  142,  124,  124,  124,
      163,  129,  151,  214,  163,  144,  124,  214,  129,  129,

      130,  130,  144,  137,  130,  137,  137,  168,  144,  137,
      149,  149,  168,  176,  144,  160,  149,  160,  536,  169,
      160,  176,  178,  137,  169,  160,  160,  172,  172,  178,
      160,  160,  172,  160,  536,  175,  170,  169,  170,  170,
      169,  171,  173,  171,  170,  175,  223,  171,  174,  174,
      223,  173,  174,  182,  171,  171,  173,  173,  182,  174,
      181,  181,  187,  171,  183,  183,  192,  209,  182,  187,
      192,  224,  224,  209,  182,  195,  196,  182,  195,  198,
      196,  192,  192,  198,  195,  195,  196,  198,  200,  200,
      200,  200,  229,  200,  200,  229,  210,  832,  208,  200,

      200,  200,  200,  200,  200,  203,  200,  200,  207,  200,
      210,  235,  208,  559,  203,  235,  203,  207,  208,  207,
      213,  207,  218,  207,  207,  207,  217,  219,  232,  217,
      213,  213,  559,  218,  232,  219,  218,  222,  213,  218,
      217,  226,  222,  217,  234,  249,  228,  228,  222,  226,
      239,  482,  228,  234,  228,  228,  230,  482,  239,  254,
      230,  226,  228,  228,  230,  236,  254,  250,  251,  236,
      250,  251,  252,  255,  249,  252,  256,  262,  292,  262,
      255,  263,  263,  256,  298,  300,  300,  292,  292,  309,
      307,  254,  307,  317,  309,  298,  833,  326,  309,  250,

      251,  326,  317,  318,  252,  255,  318,  307,  256,  259,
      259,  259,  259,  259,  259,  259,  259,  259,  260,  260,
      260,  260,  260,  260,  260,  260,  260,  264,  264,  264,
      264,  264,  264,  264,  264,  264,  265,  265,  265,  265,
      265,  265,  265,  265,  265,  319,  319,  329,  331,  330,
      329,  325,  331,  336,  332,  336,  319,  330,  332,  356,
      356,  319,  319,  336,  319,  325,  325,  325,  357,  353,
      358,  395,  336,  353,  404,  369,  357,  369,  408,  357,
      398,  398,  357,  358,  418,  369,  395,  396,  396,  396,
      396,  417,  424,  396,  404,  432,  408,  418,  433,  398,

      439,  417,  433,  450,  459,  459,  450,  463,  463,  471,
      396,  479,  439,  473,  472,  424,  473,  432,  502,  479,
      396,  498,  471,  472,  502,  471,  485,  489,  471,  491,
      485,  489,  493,  491,  473,  506,  581,  834,  489,  521,
      485,  498,  493,  521,  491,  491,  524,  526,  506,  526,
      529,  528,  524,  528,  545,  530,  530,  546,  529,  545,
      547,  551,  530,  546,  550,  581,  524,  582,  530,  547,
      524,  530,  551,  551,  550,  551,  563,  569,  583,  563,
      563,  569,  584,  608,  835,  836,  563,  585,  585,  585,
      585,  585,  585,  585,  585,  585,  582,  608,  598,  623,

      837,  633,  563,  583,  598,  633,  608,  584,  586,  586,
      586,  586,  586,  586,  586,  586,  586,  623,  634,  638,
      639,  649,  650,  733,  639,  649,  651,  733,  639,  634,
      638,  651,  762,  740,  769,  634,  808,  651,  808,  774,
      838,  797,  840,  650,  740,  841,  843,  844,  845,  842,
      762,  846,  769,  774,  774,  774,  842,  774,  797,  847,
      838,  848,  849,  850,  851,  852,  853,  854,  855,  856,
      857,  858,  859,  860,  858,  854,  861,  862,  863,  864,
      865,  866,  867,  869,  870,  867,  871,  872,  873,  874,
      875,  876,  877,  878,  879,  871,  880,  882,  883,  865,

      884,  885,  883,  887,  888,  889,  891,  892,  893,  894,
      895,  896,  896,  896,  897,  898,  899,  900,  901,  902,
      901,  904,  905,  906,  896,  907,  908,  909,  910,  896,
      896,  911,  912,  913,  914,  915,  916,  917,  918,  919,
      920,  924,  925,  926,  919,  927,  928,  931,  932,  925,
      933,  934,  935,  936,  937,  938,  939,  940,  941,  935,
      925,  942,  943,  944,  945,  946,  947,  948,  949,  950,
      951,  952,  953,  954,  952,  955,  956,  959,  961,  963,
      964,  965,  967,  968,  971,  950,  972,  973,  974,  975,
      976,  977,  978,  979,  981,  982,  983,  985,  987,  988,

      989,  990,  991,  992,  985,  994,  995,  996,  997,  998,
      999, 1000, 1002, 1005,  975,  976,  973,  974, 1006, 1008,
     1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019,
     1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029,
     1030, 1031, 1032, 1034, 1036, 1037, 1038, 1039, 1040, 1041,
     1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051,
     1052, 1053, 1054, 1055, 1056, 1057, 1052, 1058, 1042, 1059,
     1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069,
     1070, 1071, 1072, 1074, 1075, 1076, 1077, 1078, 1079, 1080,
     1081, 1082, 1084, 1086, 1089, 1092, 1093, 1089, 1095, 1096,

     1097, 1098, 1099, 1100, 1101, 1102, 1081, 1103, 1104, 1105,
     1107, 1108, 1109, 1110, 1111, 1112, 1107, 1113, 1116, 1117,
     1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127,
     1128, 1129, 1130, 1131, 1134, 1135, 1136, 1138, 1139, 1140,
     1141, 1142, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1148,
     1151, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1161, 1163,
     1165, 1166, 1161, 1168, 1169, 1170, 1171, 1172, 1173, 1174,
     1175, 1176, 1177, 1159, 1178, 1181, 1183, 1184, 1185, 1186,
     1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198,
     1201, 1205, 1207, 1208, 1209, 1210, 1211, 1185, 1212, 1205,

     1213, 1214, 1215, 1197, 1216, 1217, 1218, 1219, 1220, 1221,
     1222, 1223, 1224, 1226, 1214, 1227, 1228, 1229, 1230, 1231,
     1232, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244,
     1245, 1246, 1247, 1248, 1249, 1250, 1251, 1253, 1254, 1255,
     1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266,
     1267, 1268, 1269, 1270, 1267, 1272, 1271, 1273, 1274, 1275,
     1276, 1277, 1278, 1279, 1280, 1281, 1267, 1271, 1282, 1275,
     1283, 1284, 1285, 1286, 1288, 1290, 1291, 1292, 1293, 1294,
     1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304,
     1306, 1307, 1308, 1309, 1310, 1311, 1313, 1314, 1293, 1315,

     1316, 1318, 1319, 1321, 1322, 1324, 1325, 1326, 1327, 1328,
     1329, 1330, 1331, 1332, 1333, 1334, 1337, 1338, 1340, 1341,
     1342, 1344, 1345, 1346, 1331, 1347, 1348, 1349, 1350, 1351,
     1352, 1337, 1353, 1356, 1360, 1362, 1363, 1364, 1365, 1366,
     1367, 1368, 1369, 1371, 1373, 1374, 1375, 1376, 1377, 1374,
     1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387,
     1388, 1389, 1391, 1392, 1393, 1394, 1375, 1395, 1396, 1397,
     1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405, 1406, 1407,
     1408, 1409, 1411, 1412, 1401, 1413, 1414, 1415, 1416, 1417,
     1418, 1420, 1421, 1422, 1425, 1426, 1428, 1430, 1431, 1433,

     1435, 1437, 1438, 1439, 1444, 1446, 1447, 1448, 1449, 1450,
     1453, 1454, 1456, 1457, 1458, 1459, 1460, 1462, 1464, 1465,
     1466, 1467, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1476,
     1477, 1478, 1479, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1489, 1490, 1491, 1492, 1493, 1494, 1495, 1496, 1498, 1499,
     1500, 1501, 1502, 1503, 1496, 1504, 1506, 1507, 1508, 1509,
     1510, 1511, 1512, 1513, 1514, 1496, 1516, 1517, 1519, 1520,
     1521, 1522, 1523, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
     1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539, 1521, 1540,
     1541, 1542, 1543, 1544, 1545, 1546, 1528, 1547, 1549, 1550,

     1551, 1555, 1557, 1558, 1559, 1560, 1549, 1561, 1562, 1563,
     1565, 1566, 1568, 1570, 1571, 1572, 1565, 1573, 1574, 1575,
     1576, 1577, 1579, 1580, 1581, 1583, 1584, 1588, 1589, 1594,
     1565, 1595, 1596, 1597, 1598, 1599, 1600, 1601, 1602, 1575,
     1603, 1604, 1605, 1606, 1607, 1600, 1608, 1610, 1612, 1613,
     1614, 1616, 1617, 1618, 1619, 1620, 1621, 1622, 1623, 1624,
     1625, 1626, 1610, 1627, 1628, 1610, 1629, 1630, 1631, 1632,
     1633, 1625, 1634, 1635, 1636, 1637, 1638, 1639, 1640, 1641,
     1642, 1643, 1645, 1647, 1649, 1650, 1651, 1652, 1653, 1655,
     1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665,

     1666, 1667, 1668, 1669, 1672, 1673, 1676, 1677, 1678, 1679,
     1684, 1685, 1687, 1689, 1690, 1691, 1693, 1694, 1697, 1699,
     1700, 1701, 1702, 1703, 1704, 1694, 1705, 1706, 1708, 1711,
     1712, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722,
     1723, 1726, 1728, 1730, 1731, 1732, 1733, 1734, 1737, 1738,
     1739, 1741, 1744, 1746, 1748, 1749, 1752, 1753, 1755, 1756,
     1757, 1759, 1760, 1761, 1762, 1763, 1765, 1766, 1767, 1770,
     1772, 1773, 1774, 1760, 1775, 1777, 1778, 1780, 1781, 1783,
     1784, 1785, 1786, 1786, 1786, 1786, 1787, 1788, 1789, 1786,
     1790, 1791, 1792, 1786, 1793, 1794, 1795, 1786, 1796, 1786,

     1786, 1797, 1786, 1798, 1799, 1801, 1802, 1803, 1804, 1806,
     1805, 1807, 1802, 1805, 1809, 1811, 1812, 1814, 1815, 1816,
     1817, 1820, 1822, 1823, 1824, 1827, 1828, 1830, 1832, 1833,
     1834, 1835, 1837, 1838, 1841, 1842, 1843, 1844, 1845, 1846,
     1847, 1849, 1850, 1852, 1854, 1856, 1857, 1858, 1859, 1861,
     1863, 1864, 1865, 1866, 1867, 1869, 1870, 1871, 1872, 1873,
     1874, 1875, 1876, 1877, 1879, 1880, 1881, 1882, 1883, 1884,
     1885, 1886, 1887, 1888, 1889, 1890, 1891, 1892, 1893, 1894,
     1895, 1896, 1897, 1899, 1900, 1897, 1903, 1904, 1906, 1908,
     1909, 1910, 1911, 1912, 1913, 1914, 1915, 1916, 1918, 1919,

     1920, 1921, 1922, 1923, 1924, 1925, 1926, 1928, 1930, 1933,
     1934, 1935, 1937, 1938, 1939, 1940, 1941, 1943, 1944, 1945,
     1946, 1948, 1949, 1950, 1951, 1952, 1953, 1954, 1955, 1956,
     1958, 1959, 1961, 1963, 1964, 1965, 1966, 1967, 1968, 1969,
     1970, 1971, 1972, 1973, 1976, 1977, 1978, 1984, 1985, 1986,
     1987, 1988, 1989, 1990, 1992, 1993, 1994, 1995, 1997, 2000,
     1976, 1976, 2002, 2005, 2006, 2007, 2008, 2009, 2010, 2011,
     2012, 2013, 2014, 2015, 2016, 2018, 2019, 2020, 2021, 2022,
     2024, 2025, 2028, 2029, 2030, 2031, 2032, 2033, 2034, 2035,
     2036, 2037, 2038, 2039, 2040, 2043, 2044, 2033, 2046, 2047,

     2048, 2049, 2050, 2035, 2051, 2037, 2053, 2054, 2056, 2057,
     2058, 2059, 2061, 2062, 2063, 2065, 2067, 2068, 2069, 2071,
     2073, 2075, 2076, 2077, 2079, 2080, 2081, 2083, 2084, 2085,
     2086, 2088, 2089, 2090, 2093, 2094, 2095, 2097, 2098, 2099,
     2101, 2102, 2104, 2105, 2106, 2107, 2112, 2113, 2114, 2115,
     2116, 2117, 2118, 2119, 2120, 2121, 2122, 2124, 2126, 2121,
     2127, 2128, 2129, 2130, 2121, 2131, 2132, 2133, 2121, 2134,
     2121, 2136, 2137, 2138, 2121, 2139, 2121, 2140, 2141, 2142,
     2143, 2147, 2150, 2151, 2152, 2154, 2156, 2158, 2160, 2161,
     2162, 2165, 2166, 2167, 2168, 2170, 2173, 2174, 2175, 2176,

     2177, 2179, 2181, 2182, 2184, 2185, 2186, 2188, 2189, 2190,
     2191, 2192, 2193, 2194, 2196, 2197, 2198, 2199, 2200, 2201,
     2202, 2203, 2204, 2206, 2209, 2210, 2211, 2212, 2213, 2214,
     2215, 2216, 2217, 2218, 2219, 2220, 2221, 2222, 2223, 2226,
     2227, 2228, 2229, 2230, 2231, 2232, 2233, 2234, 2235, 2236,
     2237, 2238, 2239, 2240, 2241, 2242, 2243, 2244, 2245, 2246,
     2247, 2249, 2250, 2251, 2253, 2254, 2255, 2256, 2257, 2258,
     2259, 2260, 2262, 2263, 2265, 2266, 2268, 2270, 2272, 2273,
     2275, 2276, 2277, 2278, 2265, 2279, 2280, 2281, 2282, 2283,
     2285, 2287, 2288, 2291, 2292, 2293, 2294, 2295, 2296, 2298,

     2299, 2300, 2301, 2302, 2303, 2304, 2305, 2306, 2307, 2308,
     2309, 2304, 2310, 2311, 2312, 2313, 2314, 2315, 2316, 2317,
     2318, 2320, 2321, 2322, 2323, 2326, 2327, 2328, 2329, 2327,
     2331, 2333, 2334, 2336, 2338, 2340, 2341, 2344, 2345, 2346,
     2347, 2348, 2349, 2350, 2356, 2357, 2358, 2359, 2360, 2361,
     2365, 2366, 2367, 2368, 2369, 2370, 2371, 2372, 2374, 2375,
     2376, 2377, 2378, 2380, 2381, 2382, 2383, 2384, 2385, 2386,
     2388, 2389, 2390, 2391, 2392, 2393, 2394, 2395, 2396, 2397,
     2398, 2399, 2400, 2401, 2402, 2403, 2404, 2405, 2406, 2409,
     2410, 2411, 2412, 2413, 2415, 2416, 2418, 2419, 2421, 2425,

     2427, 2429, 2430, 2433, 2435, 2436, 2438, 2439, 2440, 2441,
     2442, 2429, 2443, 2444, 2445, 2446, 2442, 2447, 2448, 2450,
     2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2460, 2461,
     2462, 2464, 2465, 2466, 2467, 2468, 2469, 2473, 2474, 2475,
     2476, 2477, 2478, 2479, 2480, 2481, 2482, 2484, 2485, 2486,
     2487, 2488, 2489, 2491, 2492, 2493, 2494, 2496, 2497, 2498,
     2499, 2500, 2504, 2505, 2491, 2506, 2507, 2510, 2511, 2491,
     2513, 2514, 2515, 2516, 2517, 2518, 2519, 2521, 2522, 2523,
     2525, 2526, 2528, 2529, 2530, 2532, 2533, 2534, 2535, 2536,
     2525, 2538, 2530, 2539, 2540, 2541, 2543, 2544, 2545, 2547,

     2548, 2549, 2550, 2530, 2552, 2555, 2556, 2557, 2558, 2559,
     2560, 2561, 2562, 2563, 2564, 2565, 2567, 2568, 2569, 2570,
     2571, 2572, 2573, 2574, 2575, 2576, 2577, 2579, 2580, 2581,
     2583, 2584, 2585, 2588, 2589, 2590, 2591, 2592, 2594, 2595,
     2596, 2599, 2600, 2601, 2602, 2604, 2606, 2608, 2610, 2611,
     2613, 2614, 2615, 2617, 2618, 2619, 2620, 2621, 2623, 2624,
     2626, 2627, 2628, 2629, 2630, 2631, 2632, 2633, 2634, 2635,
     2632, 2636, 2637, 2638, 2632, 2640, 2641, 2642, 2644, 2647,
     2648, 2649, 2651, 2632, 2652, 2655, 2656, 2657, 2658, 2659,
     2660, 2662, 2664, 2665, 2666, 2667, 2671, 2672, 2673, 2674,

     2675, 2676, 2677, 2679, 2680, 2681, 2682, 2684, 2685, 2686,
     2687, 2689, 2690, 2691, 2692, 2693, 2694, 2696, 2698, 2699,
     2701, 2702, 2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710,
     2711, 2712, 2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720,
     2721, 2722, 2723, 2725, 2726, 2727, 2728, 2730, 2731, 2732,
     2733, 2734, 2735, 2736, 2737, 2738, 2739, 2741, 2742, 2743,
     2744, 2745, 2747, 2749, 2751, 2752, 2756, 2758, 2759, 2760,
     2761, 2762, 2763, 2764, 2765, 2766, 2768, 2771, 2772, 2773,
     2774, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2784, 2785,
     2786, 2787, 2788, 2789, 2790, 2791, 2792, 2794, 2795, 2796,

     2797, 2798, 2800, 2801, 2802, 2804, 2806, 2807, 2808, 2809,
     2811, 2814, 2816, 2817, 2820, 2821, 2822, 2824, 2825, 2826,
     2829, 2830, 2831, 2833, 2834, 2835, 2836, 2837, 2838, 2839,
     2840, 2842, 2843, 2844, 2845, 2847, 2848, 2849, 2850, 2851,
     2853, 2854, 2855, 2857, 2858, 2859, 2860, 2861, 2863, 2864,
     2865, 2866, 2867, 2869, 2870, 2871, 2872, 2873, 2874, 2875,
     2876, 2877, 2878, 2880, 2881, 2882, 2884, 2885, 2887, 2889,
     2891, 2894, 2896, 2897, 2898, 2899, 2902, 2903, 2904, 2905,
     2906, 2907, 2908, 2909, 2910, 2911, 2912, 2914, 2916, 2919,
     2920, 2921, 2924, 2925, 2926, 2927, 2928, 2931, 2934, 2936,

     2937, 2938, 2939, 2940, 2941, 2942, 2943, 2944, 2948, 2949,
     2950, 2954, 2955, 2956, 2957, 2959, 2960, 2961, 2963, 2964,
     2965, 2967, 2968, 2969, 2970, 2973, 2973, 2973, 2973, 2973,
     2973, 2973, 2973, 2973, 2973, 2973, 2973, 2974, 2974, 2974,
     2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2974, 2975,
     2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975, 2975,
     2975, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976, 2976,
     2976, 2976, 2976, 2977, 2977, 2977, 2978,  824,  823,  821,
     2978, 2979, 2979,  820, 2979, 2979, 2980, 2980, 2980, 2980,
     2980, 2980, 2980, 2980, 2980, 2980, 2980, 2980, 2981, 2981,

     2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981, 2981,
     2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982, 2982,
     2982, 2982, 2983, 2983,  819, 2983, 2984,  818,  817,  816,
     2984, 2985, 2985,  815, 2985, 2986,  813,  812, 2986, 2986,
     2987, 2987,  811, 2987, 2987, 2987, 2987, 2987, 2987, 2987,
     2987, 2987, 2988, 2988, 2988,  810, 2988, 2988, 2988, 2988,
     2988, 2988, 2988, 2988, 2989, 2989, 2989, 2989, 2989, 2989,
     2989, 2989, 2989,  809, 2989, 2989, 2990,  805,  804, 2990,
     2990, 2991,  803, 2991, 2991, 2991, 2991, 2991, 2991, 2991,
     2991, 2991, 2991, 2992,  802, 2992, 2992, 2992, 2992, 2992,

     2992, 2992, 2992, 2992, 2992, 2993, 2993,  801, 2993, 2994,
      798, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994, 2994,
     2994, 2995,  795, 2995, 2995, 2995, 2995, 2995, 2995, 2995,
     2995, 2995, 2995,  794,  793,  792,  791,  790,  789,  788,
      787,  786,  784,  783,  782,  781,  780,  779,  778,  777,
      776,  775,  773,  772,  771,  767,  766,  765,  761,  759,
      756,  755,  753,  750,  748,  747,  746,  745,  744,  743,
      742,  734,  732,  731,  730,  729,  728,  727,  726,  725,
      724,  723,  722,  720,  718,  717,  716,  715,  714,  713,
      712,  711,  710,  708,  707,  706,  705,  704,  703,  702,

      701,  699,  698,  697,  695,  694,  693,  692,  691,  690,
      689,  687,  686,  685,  684,  683,  682,  681,  679,  677,
      676,  675,  673,  672,  671,  668,  667,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  656,  655,  654,  653,
      652,  648,  647,  646,  645,  643,  642,  641,  640,  637,
      636,  635,  632,  631,  629,  628,  627,  626,  625,  624,
      622,  621,  620,  617,  615,  613,  611,  610,  607,  606,
      605,  604,  603,  602,  601,  599,  597,  596,  595,  594,
      593,  592,  591,  590,  589,  588,  587,  580,  579,  576,
      575,  574,  573,  572,  571,  570,  568,  567,  566,  565,

      564,  562,  561,  560,  558,  557,  556,  555,  554,  553,
      552,  549,  548,  544,  543,  542,  541,  540,  539,  538,
      537,  535,  534,  533,  532,  527,  523,  522,  520,  519,
      518,  517,  516,  515,  514,  513,  512,  511,  510,  509,
      507,  505,  504,  503,  501,  500,  499,  497,  496,  495,
      494,  492,  490,  488,  487,  486,  484,  483,  481,  480,
      478,  477,  476,  475,  474,  470,  469,  468,  467,  466,
      465,  464,  462,  461,  460,  458,  457,  456,  455,  453,
      452,  451,  449,  446,  445,  444,  443,  441,  440,  438,
      437,  436,  435,  434,  431,  430,  429,  428,  427,  426,

      425,  423,  422,  421,  420,  419,  416,  415,  414,  413,
      412,  411,  410,  409,  407,  406,  405,  403,  402,  401,
      400,  397,  394,  393,  392,  391,  390,  389,  388,  387,
      386,  385,  384,  383,  382,  381,  380,  379,  378,  377,
      376,  375,  374,  373,  372,  371,  370,  368,  367,  366,
      365,  364,  363,  362,  361,  360,  359,  355,  354,  352,
      351,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340,  339,  338,  335,  334,  333,  328,  327,  324,
      323,  322,  320,  316,  315,  314,  313,  312,  311,  310,
      308,  306,  305,  304,  303,  302,  301,  299,  297,  296,

      295,  294,  293,  291,  290,  289,  288,  285,  284,  282,
      281,  280,  279,  278,  277,  276,  272,  270,  268,  261,
      257,  246,  245,  244,  243,  241,  238,  237,  233,  231,
      227,  221,  220,  216,  215,  212,  211,  206,  205,  204,
      202,  201,  199,  197,  194,  193,  191,  190,  189,  186,
      185,  184,  180,  179,  177,  167,  166,  165,  164,  162,
      161,  159,  158,  156,  154,  153,  150,  147,  143,  140,
      139,  138,  136,  135,  134,  132,  131,  125,  122,  119,
      118,  116,  113,  111,  110,  104,  103,   97,   96,   95,
       91,   85,   82,   80,   79,   77,   72,   70,   66,   62,

       61,   60,   52,   45,   27,   24,   23,   15,   13,   11,
        7, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972,
     2972, 2972, 2972, 2972, 2972, 2972, 2972, 2972
    } ;

static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static char *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
char *yytext;
#line 1 "sql.l"
#define INITIAL 0
#line 3 "sql.l"
#include "gen_sql.h"
#include "sql.tab.h"
#include <stdarg.h>
#include <string.h>

int oldstate;
#define     INC_LINE_NO(n)                 \
{                                          \
    g_genReverseSql.inc_lineNo(n);         \
}

#define     INC_COLUMN_NO(n)               \
{                                          \
    g_genReverseSql.inc_columnNo(n);       \
}


extern void yyerror(const char *s);

/* comment */
#define COMMENT 1

/* between */
#define BTWMODE 2
                                                                                                                                       
#line 2555 "sql_lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 29 "sql.l"

#line 2704 "sql_lex.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
		yy_state_ptr = yy_state_buf;
		*yy_state_ptr++ = yy_current_state;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 2973 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			*yy_state_ptr++ = yy_current_state;
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 3412 );

yy_find_action:
		yy_current_state = *--yy_state_ptr;
		yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backing up */
		for ( ; ; ) /* until we find what rule we matched */
			{
			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
				{
				yy_act = yy_acclist[yy_lp];
					{
					yy_full_match = yy_cp;
					break;
					}
				}
			--yy_cp;
			yy_current_state = *--yy_state_ptr;
			yy_lp = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER )
			{
			int yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					++yylineno;
			}

do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
case 1:
YY_RULE_SETUP
#line 30 "sql.l"
{ INC_COLUMN_NO(yyleng); return AND_AND_SYM; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 31 "sql.l"
{ INC_COLUMN_NO(yyleng); return LT; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 32 "sql.l"
{ INC_COLUMN_NO(yyleng); return LE; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 33 "sql.l"
{ INC_COLUMN_NO(yyleng); return NE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 34 "sql.l"
{ INC_COLUMN_NO(yyleng); return NE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 35 "sql.l"
{ INC_COLUMN_NO(yyleng); return EQ; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 36 "sql.l"
{ INC_COLUMN_NO(yyleng); return GT_SYM; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 37 "sql.l"
{ INC_COLUMN_NO(yyleng); return GE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 38 "sql.l"
{ INC_COLUMN_NO(yyleng); return SHIFT_LEFT; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 39 "sql.l"
{ INC_COLUMN_NO(yyleng); return SHIFT_RIGHT; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 40 "sql.l"
{ INC_COLUMN_NO(yyleng); return EQUAL_SYM; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 41 "sql.l"
{ INC_COLUMN_NO(yyleng); return ACCESSIBLE_SYM; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 42 "sql.l"
{ INC_COLUMN_NO(yyleng); return ACTION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 43 "sql.l"
{ INC_COLUMN_NO(yyleng); return ADD; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 44 "sql.l"
{ INC_COLUMN_NO(yyleng); return AFTER_SYM; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 45 "sql.l"
{ INC_COLUMN_NO(yyleng); return AGAINST; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 46 "sql.l"
{ INC_COLUMN_NO(yyleng); return AGGREGATE_SYM; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 47 "sql.l"
{ INC_COLUMN_NO(yyleng); return ALL; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 48 "sql.l"
{ INC_COLUMN_NO(yyleng); return ALGORITHM_SYM; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 49 "sql.l"
{ INC_COLUMN_NO(yyleng); return ALTER; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 50 "sql.l"
{ INC_COLUMN_NO(yyleng); return ANALYSE_SYM; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 51 "sql.l"
{ INC_COLUMN_NO(yyleng); return ANALYZE_SYM; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 52 "sql.l"
{ INC_COLUMN_NO(yyleng); return AND_SYM; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 53 "sql.l"
{ INC_COLUMN_NO(yyleng); return ANY_SYM; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 54 "sql.l"
{ INC_COLUMN_NO(yyleng); return AS; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 55 "sql.l"
{ INC_COLUMN_NO(yyleng); return ASC; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 56 "sql.l"
{ INC_COLUMN_NO(yyleng); return ASCII_SYM; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 57 "sql.l"
{ INC_COLUMN_NO(yyleng); return ASENSITIVE_SYM; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 58 "sql.l"
{ INC_COLUMN_NO(yyleng); return AT_SYM; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 59 "sql.l"
{ INC_COLUMN_NO(yyleng); return AUTO_INC; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 60 "sql.l"
{ INC_COLUMN_NO(yyleng); return AUTOEXTEND_SIZE_SYM; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 61 "sql.l"
{ INC_COLUMN_NO(yyleng); return AVG_SYM; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 62 "sql.l"
{ INC_COLUMN_NO(yyleng); return AVG_ROW_LENGTH; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 63 "sql.l"
{ INC_COLUMN_NO(yyleng); return BACKUP_SYM; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 64 "sql.l"
{ INC_COLUMN_NO(yyleng); return BEFORE_SYM; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 65 "sql.l"
{ INC_COLUMN_NO(yyleng); return BEGIN_SYM; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 66 "sql.l"
{ INC_COLUMN_NO(yyleng); return BETWEEN_SYM; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 67 "sql.l"
{ INC_COLUMN_NO(yyleng); return BIGINT; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 68 "sql.l"
{ INC_COLUMN_NO(yyleng); return BINARY; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 69 "sql.l"
{ INC_COLUMN_NO(yyleng); return BINLOG_SYM; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 70 "sql.l"
{ INC_COLUMN_NO(yyleng); return BIT_SYM; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 71 "sql.l"
{ INC_COLUMN_NO(yyleng); return BLOB_SYM; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 72 "sql.l"
{ INC_COLUMN_NO(yyleng); return BLOCK_SYM; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 73 "sql.l"
{ INC_COLUMN_NO(yyleng); return BOOL_SYM; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 74 "sql.l"
{ INC_COLUMN_NO(yyleng); return BOOLEAN_SYM; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 75 "sql.l"
{ INC_COLUMN_NO(yyleng); return BOTH; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 76 "sql.l"
{ INC_COLUMN_NO(yyleng); return BTREE_SYM; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 77 "sql.l"
{ INC_COLUMN_NO(yyleng); return BY; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 78 "sql.l"
{ INC_COLUMN_NO(yyleng); return BYTE_SYM; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 79 "sql.l"
{ INC_COLUMN_NO(yyleng); return CACHE_SYM; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 80 "sql.l"
{ INC_COLUMN_NO(yyleng); return CALL_SYM; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 81 "sql.l"
{ INC_COLUMN_NO(yyleng); return CASCADE; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 82 "sql.l"
{ INC_COLUMN_NO(yyleng); return CASCADED; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 83 "sql.l"
{ INC_COLUMN_NO(yyleng); return CASE_SYM; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 84 "sql.l"
{ INC_COLUMN_NO(yyleng); return CATALOG_NAME_SYM; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 85 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHAIN_SYM; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 86 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHANGE; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 87 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHANGED; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 88 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHAR_SYM; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 89 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHAR_SYM; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 90 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHARSET; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 91 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHECK_SYM; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 92 "sql.l"
{ INC_COLUMN_NO(yyleng); return CHECKSUM_SYM; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 93 "sql.l"
{ INC_COLUMN_NO(yyleng); return CIPHER_SYM; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 94 "sql.l"
{ INC_COLUMN_NO(yyleng); return CLASS_ORIGIN_SYM; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 95 "sql.l"
{ INC_COLUMN_NO(yyleng); return CLIENT_SYM; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 96 "sql.l"
{ INC_COLUMN_NO(yyleng); return CLOSE_SYM; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 97 "sql.l"
{ INC_COLUMN_NO(yyleng); return COALESCE; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 98 "sql.l"
{ INC_COLUMN_NO(yyleng); return CODE_SYM; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 99 "sql.l"
{ INC_COLUMN_NO(yyleng); return COLLATE_SYM; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 100 "sql.l"
{ INC_COLUMN_NO(yyleng); return COLLATION_SYM; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 101 "sql.l"
{ INC_COLUMN_NO(yyleng); return COLUMN_SYM; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 102 "sql.l"
{ INC_COLUMN_NO(yyleng); return COLUMN_FORMAT_SYM; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 103 "sql.l"
{ INC_COLUMN_NO(yyleng); return COLUMN_NAME_SYM; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 104 "sql.l"
{ INC_COLUMN_NO(yyleng); return COLUMNS; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 105 "sql.l"
{ INC_COLUMN_NO(yyleng); return COMMENT_SYM; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 106 "sql.l"
{ INC_COLUMN_NO(yyleng); return COMMIT_SYM; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 107 "sql.l"
{ INC_COLUMN_NO(yyleng); return COMMITTED_SYM; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 108 "sql.l"
{ INC_COLUMN_NO(yyleng); return COMPACT_SYM; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 109 "sql.l"
{ INC_COLUMN_NO(yyleng); return COMPLETION_SYM; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 110 "sql.l"
{ INC_COLUMN_NO(yyleng); return COMPRESSED_SYM; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 111 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONCURRENT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 112 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONDITION_SYM; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 113 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONNECTION_SYM; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 114 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONSISTENT_SYM; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 115 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONSTRAINT; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 116 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONSTRAINT_CATALOG_SYM; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 117 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONSTRAINT_NAME_SYM; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 118 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONSTRAINT_SCHEMA_SYM; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 119 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONTAINS_SYM; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 120 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONTEXT_SYM; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 121 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONTINUE_SYM; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 122 "sql.l"
{ INC_COLUMN_NO(yyleng); return CONVERT_SYM; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 123 "sql.l"
{ INC_COLUMN_NO(yyleng); return CPU_SYM; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 124 "sql.l"
{ INC_COLUMN_NO(yyleng); return CREATE; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 125 "sql.l"
{ INC_COLUMN_NO(yyleng); return CROSS; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 126 "sql.l"
{ INC_COLUMN_NO(yyleng); return CUBE_SYM; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 127 "sql.l"
{ INC_COLUMN_NO(yyleng); return CURRENT_SYM; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 128 "sql.l"
{ INC_COLUMN_NO(yyleng); return CURDATE; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 129 "sql.l"
{ INC_COLUMN_NO(yyleng); return CURTIME; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 130 "sql.l"
{ INC_COLUMN_NO(yyleng); return NOW_SYM; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 131 "sql.l"
{ INC_COLUMN_NO(yyleng); return CURRENT_USER; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 132 "sql.l"
{ INC_COLUMN_NO(yyleng); return CURSOR_SYM; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 133 "sql.l"
{ INC_COLUMN_NO(yyleng); return CURSOR_NAME_SYM; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 134 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATA_SYM; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 135 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATABASE; }
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 136 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATABASES; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 137 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATAFILE_SYM; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 138 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATE_SYM; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 139 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATETIME; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 140 "sql.l"
{ INC_COLUMN_NO(yyleng); return DAY_SYM; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 141 "sql.l"
{ INC_COLUMN_NO(yyleng); return DAY_HOUR_SYM; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 142 "sql.l"
{ INC_COLUMN_NO(yyleng); return DAY_MICROSECOND_SYM; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 143 "sql.l"
{ INC_COLUMN_NO(yyleng); return DAY_MINUTE_SYM; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 144 "sql.l"
{ INC_COLUMN_NO(yyleng); return DAY_SECOND_SYM; }
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 145 "sql.l"
{ INC_COLUMN_NO(yyleng); return DEALLOCATE_SYM; }
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 146 "sql.l"
{ INC_COLUMN_NO(yyleng); return DECIMAL_SYM; }
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 147 "sql.l"
{ INC_COLUMN_NO(yyleng); return DECIMAL_SYM; }
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 148 "sql.l"
{ INC_COLUMN_NO(yyleng); return DECLARE_SYM; }
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 149 "sql.l"
{ INC_COLUMN_NO(yyleng); return DEFAULT; }
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 150 "sql.l"
{ INC_COLUMN_NO(yyleng); return DEFAULT_AUTH_SYM; }
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 151 "sql.l"
{ INC_COLUMN_NO(yyleng); return DEFINER_SYM; }
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 152 "sql.l"
{ INC_COLUMN_NO(yyleng); return DELAYED_SYM; }
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 153 "sql.l"
{ INC_COLUMN_NO(yyleng); return DELAY_KEY_WRITE_SYM; }
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 154 "sql.l"
{ INC_COLUMN_NO(yyleng); return DELETE_SYM; }
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 155 "sql.l"
{ INC_COLUMN_NO(yyleng); return DESC; }
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 156 "sql.l"
{ INC_COLUMN_NO(yyleng); return DESCRIBE; }
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 157 "sql.l"
{ INC_COLUMN_NO(yyleng); return DES_KEY_FILE; }
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 158 "sql.l"
{ INC_COLUMN_NO(yyleng); return DETERMINISTIC_SYM; }
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 159 "sql.l"
{ INC_COLUMN_NO(yyleng); return DIAGNOSTICS_SYM; }
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 160 "sql.l"
{ INC_COLUMN_NO(yyleng); return DIRECTORY_SYM; }
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 161 "sql.l"
{ INC_COLUMN_NO(yyleng); return DISABLE_SYM; }
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 162 "sql.l"
{ INC_COLUMN_NO(yyleng); return DISCARD; }
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 163 "sql.l"
{ INC_COLUMN_NO(yyleng); return DISK_SYM; }
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 164 "sql.l"
{ INC_COLUMN_NO(yyleng); return DISTINCT; }
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 165 "sql.l"
{ INC_COLUMN_NO(yyleng); return DISTINCT; }/*Accesslikesthis*/
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 166 "sql.l"
{ INC_COLUMN_NO(yyleng); return DIV_SYM; }
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 167 "sql.l"
{ INC_COLUMN_NO(yyleng); return DO_SYM; }
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 168 "sql.l"
{ INC_COLUMN_NO(yyleng); return DOUBLE_SYM; }
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 169 "sql.l"
{ INC_COLUMN_NO(yyleng); return DROP; }
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 170 "sql.l"
{ INC_COLUMN_NO(yyleng); return DUAL_SYM; }
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 171 "sql.l"
{ INC_COLUMN_NO(yyleng); return DUMPFILE; }
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 172 "sql.l"
{ INC_COLUMN_NO(yyleng); return DUPLICATE_SYM; }
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 173 "sql.l"
{ INC_COLUMN_NO(yyleng); return DYNAMIC_SYM; }
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 174 "sql.l"
{ INC_COLUMN_NO(yyleng); return EACH_SYM; }
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 175 "sql.l"
{ INC_COLUMN_NO(yyleng); return ELSE; }
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 176 "sql.l"
{ INC_COLUMN_NO(yyleng); return ELSEIF_SYM; }
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 177 "sql.l"
{ INC_COLUMN_NO(yyleng); return ENABLE_SYM; }
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 178 "sql.l"
{ INC_COLUMN_NO(yyleng); return ENCLOSED; }
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 179 "sql.l"
{ INC_COLUMN_NO(yyleng); return END; }
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 180 "sql.l"
{ INC_COLUMN_NO(yyleng); return ENDS_SYM; }
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 181 "sql.l"
{ INC_COLUMN_NO(yyleng); return ENGINE_SYM; }
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 182 "sql.l"
{ INC_COLUMN_NO(yyleng); return ENGINES_SYM; }
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 183 "sql.l"
{ INC_COLUMN_NO(yyleng); return ENUM; }
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 184 "sql.l"
{ INC_COLUMN_NO(yyleng); return ERROR_SYM; }
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 185 "sql.l"
{ INC_COLUMN_NO(yyleng); return ERRORS; }
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 186 "sql.l"
{ INC_COLUMN_NO(yyleng); return ESCAPE_SYM; }
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 187 "sql.l"
{ INC_COLUMN_NO(yyleng); return ESCAPED; }
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 188 "sql.l"
{ INC_COLUMN_NO(yyleng); return EVENT_SYM; }
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 189 "sql.l"
{ INC_COLUMN_NO(yyleng); return EVENTS_SYM; }
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 190 "sql.l"
{ INC_COLUMN_NO(yyleng); return EVERY_SYM; }
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 191 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXCHANGE_SYM; }
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 192 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXECUTE_SYM; }
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 193 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXISTS; }
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 194 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXIT_SYM; }
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 195 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXPANSION_SYM; }
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 196 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXPORT_SYM; }
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 197 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXPIRE_SYM; }
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 198 "sql.l"
{ INC_COLUMN_NO(yyleng); return DESCRIBE; }
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 199 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXTENDED_SYM; }
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 200 "sql.l"
{ INC_COLUMN_NO(yyleng); return EXTENT_SIZE_SYM; }
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 201 "sql.l"
{ INC_COLUMN_NO(yyleng); return FALSE_SYM; }
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 202 "sql.l"
{ INC_COLUMN_NO(yyleng); return FAST_SYM; }
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 203 "sql.l"
{ INC_COLUMN_NO(yyleng); return FAULTS_SYM; }
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 204 "sql.l"
{ INC_COLUMN_NO(yyleng); return FETCH_SYM; }
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 205 "sql.l"
{ INC_COLUMN_NO(yyleng); return COLUMNS; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 206 "sql.l"
{ INC_COLUMN_NO(yyleng); return FILE_SYM; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 207 "sql.l"
{ INC_COLUMN_NO(yyleng); return FIRST_SYM; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 208 "sql.l"
{ INC_COLUMN_NO(yyleng); return FIXED_SYM; }
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 209 "sql.l"
{ INC_COLUMN_NO(yyleng); return FLOAT_SYM; }
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 210 "sql.l"
{ INC_COLUMN_NO(yyleng); return FLOAT_SYM; }
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 211 "sql.l"
{ INC_COLUMN_NO(yyleng); return DOUBLE_SYM; }
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 212 "sql.l"
{ INC_COLUMN_NO(yyleng); return FLUSH_SYM; }
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 213 "sql.l"
{ INC_COLUMN_NO(yyleng); return FOR_SYM; }
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 214 "sql.l"
{ INC_COLUMN_NO(yyleng); return FORCE_SYM; }
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 215 "sql.l"
{ INC_COLUMN_NO(yyleng); return FOREIGN; }
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 216 "sql.l"
{ INC_COLUMN_NO(yyleng); return FORMAT_SYM; }
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 217 "sql.l"
{ INC_COLUMN_NO(yyleng); return FOUND_SYM; }
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 218 "sql.l"
{ INC_COLUMN_NO(yyleng); return FROM; }
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 219 "sql.l"
{ INC_COLUMN_NO(yyleng); return FULL; }
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 220 "sql.l"
{ INC_COLUMN_NO(yyleng); return FULLTEXT_SYM; }
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 221 "sql.l"
{ INC_COLUMN_NO(yyleng); return FUNCTION_SYM; }
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 222 "sql.l"
{ INC_COLUMN_NO(yyleng); return GENERAL; }
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 223 "sql.l"
{ INC_COLUMN_NO(yyleng); return GEOMETRY_SYM; }
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 224 "sql.l"
{ INC_COLUMN_NO(yyleng); return GEOMETRYCOLLECTION; }
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 225 "sql.l"
{ INC_COLUMN_NO(yyleng); return GET_FORMAT; }
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 226 "sql.l"
{ INC_COLUMN_NO(yyleng); return GET_SYM; }
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 227 "sql.l"
{ INC_COLUMN_NO(yyleng); return GLOBAL_SYM; }
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 228 "sql.l"
{ INC_COLUMN_NO(yyleng); return GRANT; }
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 229 "sql.l"
{ INC_COLUMN_NO(yyleng); return GRANTS; }
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 230 "sql.l"
{ INC_COLUMN_NO(yyleng); return GROUP_SYM; }
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 231 "sql.l"
{ INC_COLUMN_NO(yyleng); return HANDLER_SYM; }
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 232 "sql.l"
{ INC_COLUMN_NO(yyleng); return HASH_SYM; }
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 233 "sql.l"
{ INC_COLUMN_NO(yyleng); return HAVING; }
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 234 "sql.l"
{ INC_COLUMN_NO(yyleng); return HELP_SYM; }
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 235 "sql.l"
{ INC_COLUMN_NO(yyleng); return HIGH_PRIORITY; }
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 236 "sql.l"
{ INC_COLUMN_NO(yyleng); return HOST_SYM; }
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 237 "sql.l"
{ INC_COLUMN_NO(yyleng); return HOSTS_SYM; }
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 238 "sql.l"
{ INC_COLUMN_NO(yyleng); return HOUR_SYM; }
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 239 "sql.l"
{ INC_COLUMN_NO(yyleng); return HOUR_MICROSECOND_SYM; }
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 240 "sql.l"
{ INC_COLUMN_NO(yyleng); return HOUR_MINUTE_SYM; }
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 241 "sql.l"
{ INC_COLUMN_NO(yyleng); return HOUR_SECOND_SYM; }
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 242 "sql.l"
{ INC_COLUMN_NO(yyleng); return IDENTIFIED_SYM; }
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 243 "sql.l"
{ INC_COLUMN_NO(yyleng); return IF; }
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 244 "sql.l"
{ INC_COLUMN_NO(yyleng); return IGNORE_SYM; }
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 245 "sql.l"
{ INC_COLUMN_NO(yyleng); return IGNORE_SERVER_IDS_SYM; }
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 246 "sql.l"
{ INC_COLUMN_NO(yyleng); return IMPORT; }
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 247 "sql.l"
{ INC_COLUMN_NO(yyleng); return IN_SYM; }
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 248 "sql.l"
{ INC_COLUMN_NO(yyleng); return INDEX_SYM; }
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 249 "sql.l"
{ INC_COLUMN_NO(yyleng); return INDEXES; }
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 250 "sql.l"
{ INC_COLUMN_NO(yyleng); return INFILE; }
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 251 "sql.l"
{ INC_COLUMN_NO(yyleng); return INITIAL_SIZE_SYM; }
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 252 "sql.l"
{ INC_COLUMN_NO(yyleng); return INNER_SYM; }
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 253 "sql.l"
{ INC_COLUMN_NO(yyleng); return INOUT_SYM; }
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 254 "sql.l"
{ INC_COLUMN_NO(yyleng); return INSENSITIVE_SYM; }
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 255 "sql.l"
{ INC_COLUMN_NO(yyleng); return INSERT; }
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 256 "sql.l"
{ INC_COLUMN_NO(yyleng); return INSERT_METHOD; }
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 257 "sql.l"
{ INC_COLUMN_NO(yyleng); return INSTALL_SYM; }
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 258 "sql.l"
{ INC_COLUMN_NO(yyleng); return INT_SYM; }
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 259 "sql.l"
{ INC_COLUMN_NO(yyleng); return TINYINT; }
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 260 "sql.l"
{ INC_COLUMN_NO(yyleng); return SMALLINT; }
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 261 "sql.l"
{ INC_COLUMN_NO(yyleng); return MEDIUMINT; }
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 262 "sql.l"
{ INC_COLUMN_NO(yyleng); return INT_SYM; }
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 263 "sql.l"
{ INC_COLUMN_NO(yyleng); return BIGINT; }
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 264 "sql.l"
{ INC_COLUMN_NO(yyleng); return INT_SYM; }
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 265 "sql.l"
{ INC_COLUMN_NO(yyleng); return INTERVAL_SYM; }
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 266 "sql.l"
{ INC_COLUMN_NO(yyleng); return INTO; }
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 267 "sql.l"
{ INC_COLUMN_NO(yyleng); return IO_SYM; }
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 268 "sql.l"
{ INC_COLUMN_NO(yyleng); return IO_AFTER_GTIDS; }
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 269 "sql.l"
{ INC_COLUMN_NO(yyleng); return IO_BEFORE_GTIDS; }
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 270 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELAY_THREAD; }
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 271 "sql.l"
{ INC_COLUMN_NO(yyleng); return IPC_SYM; }
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 272 "sql.l"
{ INC_COLUMN_NO(yyleng); return IS; }
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 273 "sql.l"
{ INC_COLUMN_NO(yyleng); return ISOLATION; }
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 274 "sql.l"
{ INC_COLUMN_NO(yyleng); return ISSUER_SYM; }
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 275 "sql.l"
{ INC_COLUMN_NO(yyleng); return ITERATE_SYM; }
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 276 "sql.l"
{ INC_COLUMN_NO(yyleng); return INVOKER_SYM; }
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 277 "sql.l"
{ INC_COLUMN_NO(yyleng); return JOIN_SYM; }
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 278 "sql.l"
{ INC_COLUMN_NO(yyleng); return KEY_SYM; }
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 279 "sql.l"
{ INC_COLUMN_NO(yyleng); return KEYS; }
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 280 "sql.l"
{ INC_COLUMN_NO(yyleng); return KEY_BLOCK_SIZE; }
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 281 "sql.l"
{ INC_COLUMN_NO(yyleng); return KILL_SYM; }
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 282 "sql.l"
{ INC_COLUMN_NO(yyleng); return LANGUAGE_SYM; }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 283 "sql.l"
{ INC_COLUMN_NO(yyleng); return LAST_SYM; }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 284 "sql.l"
{ INC_COLUMN_NO(yyleng); return LEADING; }
	YY_BREAK
case 256:
YY_RULE_SETUP
#line 285 "sql.l"
{ INC_COLUMN_NO(yyleng); return LEAVE_SYM; }
	YY_BREAK
case 257:
YY_RULE_SETUP
#line 286 "sql.l"
{ INC_COLUMN_NO(yyleng); return LEAVES; }
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 287 "sql.l"
{ INC_COLUMN_NO(yyleng); return LEFT; }
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 288 "sql.l"
{ INC_COLUMN_NO(yyleng); return LESS_SYM; }
	YY_BREAK
case 260:
YY_RULE_SETUP
#line 289 "sql.l"
{ INC_COLUMN_NO(yyleng); return LEVEL_SYM; }
	YY_BREAK
case 261:
YY_RULE_SETUP
#line 290 "sql.l"
{ INC_COLUMN_NO(yyleng); return LIKE; }
	YY_BREAK
case 262:
YY_RULE_SETUP
#line 291 "sql.l"
{ INC_COLUMN_NO(yyleng); return LIMIT; }
	YY_BREAK
case 263:
YY_RULE_SETUP
#line 292 "sql.l"
{ INC_COLUMN_NO(yyleng); return LINEAR_SYM; }
	YY_BREAK
case 264:
YY_RULE_SETUP
#line 293 "sql.l"
{ INC_COLUMN_NO(yyleng); return LINES; }
	YY_BREAK
case 265:
YY_RULE_SETUP
#line 294 "sql.l"
{ INC_COLUMN_NO(yyleng); return LINESTRING; }
	YY_BREAK
case 266:
YY_RULE_SETUP
#line 295 "sql.l"
{ INC_COLUMN_NO(yyleng); return LIST_SYM; }
	YY_BREAK
case 267:
YY_RULE_SETUP
#line 296 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOAD; }
	YY_BREAK
case 268:
YY_RULE_SETUP
#line 297 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOCAL_SYM; }
	YY_BREAK
case 269:
YY_RULE_SETUP
#line 298 "sql.l"
{ INC_COLUMN_NO(yyleng); return NOW_SYM; }
	YY_BREAK
case 270:
YY_RULE_SETUP
#line 299 "sql.l"
{ INC_COLUMN_NO(yyleng); return NOW_SYM; }
	YY_BREAK
case 271:
YY_RULE_SETUP
#line 300 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOCK_SYM; }
	YY_BREAK
case 272:
YY_RULE_SETUP
#line 301 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOCKS_SYM; }
	YY_BREAK
case 273:
YY_RULE_SETUP
#line 302 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOGFILE_SYM; }
	YY_BREAK
case 274:
YY_RULE_SETUP
#line 303 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOGS_SYM; }
	YY_BREAK
case 275:
YY_RULE_SETUP
#line 304 "sql.l"
{ INC_COLUMN_NO(yyleng); return LONG_SYM; }
	YY_BREAK
case 276:
YY_RULE_SETUP
#line 305 "sql.l"
{ INC_COLUMN_NO(yyleng); return LONGBLOB; }
	YY_BREAK
case 277:
YY_RULE_SETUP
#line 306 "sql.l"
{ INC_COLUMN_NO(yyleng); return LONGTEXT; }
	YY_BREAK
case 278:
YY_RULE_SETUP
#line 307 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOOP_SYM; }
	YY_BREAK
case 279:
YY_RULE_SETUP
#line 308 "sql.l"
{ INC_COLUMN_NO(yyleng); return LOW_PRIORITY; }
	YY_BREAK
case 280:
YY_RULE_SETUP
#line 309 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SYM; }
	YY_BREAK
case 281:
YY_RULE_SETUP
#line 310 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_AUTO_POSITION_SYM; }
	YY_BREAK
case 282:
YY_RULE_SETUP
#line 311 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_BIND_SYM; }
	YY_BREAK
case 283:
YY_RULE_SETUP
#line 312 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_CONNECT_RETRY_SYM; }
	YY_BREAK
case 284:
YY_RULE_SETUP
#line 313 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_DELAY_SYM; }
	YY_BREAK
case 285:
YY_RULE_SETUP
#line 314 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_HOST_SYM; }
	YY_BREAK
case 286:
YY_RULE_SETUP
#line 315 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_LOG_FILE_SYM; }
	YY_BREAK
case 287:
YY_RULE_SETUP
#line 316 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_LOG_POS_SYM; }
	YY_BREAK
case 288:
YY_RULE_SETUP
#line 317 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_PASSWORD_SYM; }
	YY_BREAK
case 289:
YY_RULE_SETUP
#line 318 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_PORT_SYM; }
	YY_BREAK
case 290:
YY_RULE_SETUP
#line 319 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_RETRY_COUNT_SYM; }
	YY_BREAK
case 291:
YY_RULE_SETUP
#line 320 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SERVER_ID_SYM; }
	YY_BREAK
case 292:
YY_RULE_SETUP
#line 321 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_SYM; }
	YY_BREAK
case 293:
YY_RULE_SETUP
#line 322 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_CA_SYM; }
	YY_BREAK
case 294:
YY_RULE_SETUP
#line 323 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_CAPATH_SYM; }
	YY_BREAK
case 295:
YY_RULE_SETUP
#line 324 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_CERT_SYM; }
	YY_BREAK
case 296:
YY_RULE_SETUP
#line 325 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_CIPHER_SYM; }
	YY_BREAK
case 297:
YY_RULE_SETUP
#line 326 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_CRL_SYM; }
	YY_BREAK
case 298:
YY_RULE_SETUP
#line 327 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_CRLPATH_SYM; }
	YY_BREAK
case 299:
YY_RULE_SETUP
#line 328 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_KEY_SYM; }
	YY_BREAK
case 300:
YY_RULE_SETUP
#line 329 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_SSL_VERIFY_SERVER_CERT_SYM; }
	YY_BREAK
case 301:
YY_RULE_SETUP
#line 330 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_USER_SYM; }
	YY_BREAK
case 302:
YY_RULE_SETUP
#line 331 "sql.l"
{ INC_COLUMN_NO(yyleng); return MASTER_HEARTBEAT_PERIOD_SYM; }
	YY_BREAK
case 303:
YY_RULE_SETUP
#line 332 "sql.l"
{ INC_COLUMN_NO(yyleng); return MATCH; }
	YY_BREAK
case 304:
YY_RULE_SETUP
#line 333 "sql.l"
{ INC_COLUMN_NO(yyleng); return MAX_CONNECTIONS_PER_HOUR; }
	YY_BREAK
case 305:
YY_RULE_SETUP
#line 334 "sql.l"
{ INC_COLUMN_NO(yyleng); return MAX_QUERIES_PER_HOUR; }
	YY_BREAK
case 306:
YY_RULE_SETUP
#line 335 "sql.l"
{ INC_COLUMN_NO(yyleng); return MAX_ROWS; }
	YY_BREAK
case 307:
YY_RULE_SETUP
#line 336 "sql.l"
{ INC_COLUMN_NO(yyleng); return MAX_SIZE_SYM; }
	YY_BREAK
case 308:
YY_RULE_SETUP
#line 337 "sql.l"
{ INC_COLUMN_NO(yyleng); return MAX_UPDATES_PER_HOUR; }
	YY_BREAK
case 309:
YY_RULE_SETUP
#line 338 "sql.l"
{ INC_COLUMN_NO(yyleng); return MAX_USER_CONNECTIONS_SYM; }
	YY_BREAK
case 310:
YY_RULE_SETUP
#line 339 "sql.l"
{ INC_COLUMN_NO(yyleng); return MAX_VALUE_SYM; }
	YY_BREAK
case 311:
YY_RULE_SETUP
#line 340 "sql.l"
{ INC_COLUMN_NO(yyleng); return MEDIUM_SYM; }
	YY_BREAK
case 312:
YY_RULE_SETUP
#line 341 "sql.l"
{ INC_COLUMN_NO(yyleng); return MEDIUMBLOB; }
	YY_BREAK
case 313:
YY_RULE_SETUP
#line 342 "sql.l"
{ INC_COLUMN_NO(yyleng); return MEDIUMINT; }
	YY_BREAK
case 314:
YY_RULE_SETUP
#line 343 "sql.l"
{ INC_COLUMN_NO(yyleng); return MEDIUMTEXT; }
	YY_BREAK
case 315:
YY_RULE_SETUP
#line 344 "sql.l"
{ INC_COLUMN_NO(yyleng); return MEMORY_SYM; }
	YY_BREAK
case 316:
YY_RULE_SETUP
#line 345 "sql.l"
{ INC_COLUMN_NO(yyleng); return MERGE_SYM; }
	YY_BREAK
case 317:
YY_RULE_SETUP
#line 346 "sql.l"
{ INC_COLUMN_NO(yyleng); return MESSAGE_TEXT_SYM; }
	YY_BREAK
case 318:
YY_RULE_SETUP
#line 347 "sql.l"
{ INC_COLUMN_NO(yyleng); return MICROSECOND_SYM; }
	YY_BREAK
case 319:
YY_RULE_SETUP
#line 348 "sql.l"
{ INC_COLUMN_NO(yyleng); return MEDIUMINT; }/*Forpowerbuilder*/
	YY_BREAK
case 320:
YY_RULE_SETUP
#line 349 "sql.l"
{ INC_COLUMN_NO(yyleng); return MIGRATE_SYM; }
	YY_BREAK
case 321:
YY_RULE_SETUP
#line 350 "sql.l"
{ INC_COLUMN_NO(yyleng); return MINUTE_SYM; }
	YY_BREAK
case 322:
YY_RULE_SETUP
#line 351 "sql.l"
{ INC_COLUMN_NO(yyleng); return MINUTE_MICROSECOND_SYM; }
	YY_BREAK
case 323:
YY_RULE_SETUP
#line 352 "sql.l"
{ INC_COLUMN_NO(yyleng); return MINUTE_SECOND_SYM; }
	YY_BREAK
case 324:
YY_RULE_SETUP
#line 353 "sql.l"
{ INC_COLUMN_NO(yyleng); return MIN_ROWS; }
	YY_BREAK
case 325:
YY_RULE_SETUP
#line 354 "sql.l"
{ INC_COLUMN_NO(yyleng); return MOD_SYM; }
	YY_BREAK
case 326:
YY_RULE_SETUP
#line 355 "sql.l"
{ INC_COLUMN_NO(yyleng); return MODE_SYM; }
	YY_BREAK
case 327:
YY_RULE_SETUP
#line 356 "sql.l"
{ INC_COLUMN_NO(yyleng); return MODIFIES_SYM; }
	YY_BREAK
case 328:
YY_RULE_SETUP
#line 357 "sql.l"
{ INC_COLUMN_NO(yyleng); return MODIFY_SYM; }
	YY_BREAK
case 329:
YY_RULE_SETUP
#line 358 "sql.l"
{ INC_COLUMN_NO(yyleng); return MONTH_SYM; }
	YY_BREAK
case 330:
YY_RULE_SETUP
#line 359 "sql.l"
{ INC_COLUMN_NO(yyleng); return MULTILINESTRING; }
	YY_BREAK
case 331:
YY_RULE_SETUP
#line 360 "sql.l"
{ INC_COLUMN_NO(yyleng); return MULTIPOINT; }
	YY_BREAK
case 332:
YY_RULE_SETUP
#line 361 "sql.l"
{ INC_COLUMN_NO(yyleng); return MULTIPOLYGON; }
	YY_BREAK
case 333:
YY_RULE_SETUP
#line 362 "sql.l"
{ INC_COLUMN_NO(yyleng); return MUTEX_SYM; }
	YY_BREAK
case 334:
YY_RULE_SETUP
#line 363 "sql.l"
{ INC_COLUMN_NO(yyleng); return MYSQL_ERRNO_SYM; }
	YY_BREAK
case 335:
YY_RULE_SETUP
#line 364 "sql.l"
{ INC_COLUMN_NO(yyleng); return NAME_SYM; }
	YY_BREAK
case 336:
YY_RULE_SETUP
#line 365 "sql.l"
{ INC_COLUMN_NO(yyleng); return NAMES_SYM; }
	YY_BREAK
case 337:
YY_RULE_SETUP
#line 366 "sql.l"
{ INC_COLUMN_NO(yyleng); return NATIONAL_SYM; }
	YY_BREAK
case 338:
YY_RULE_SETUP
#line 367 "sql.l"
{ INC_COLUMN_NO(yyleng); return NATURAL; }
	YY_BREAK
case 339:
YY_RULE_SETUP
#line 368 "sql.l"
{ INC_COLUMN_NO(yyleng); return NDBCLUSTER_SYM; }
	YY_BREAK
case 340:
YY_RULE_SETUP
#line 369 "sql.l"
{ INC_COLUMN_NO(yyleng); return NDBCLUSTER_SYM; }
	YY_BREAK
case 341:
YY_RULE_SETUP
#line 370 "sql.l"
{ INC_COLUMN_NO(yyleng); return NCHAR_SYM; }
	YY_BREAK
case 342:
YY_RULE_SETUP
#line 371 "sql.l"
{ INC_COLUMN_NO(yyleng); return NEW_SYM; }
	YY_BREAK
case 343:
YY_RULE_SETUP
#line 372 "sql.l"
{ INC_COLUMN_NO(yyleng); return NEXT_SYM; }
	YY_BREAK
case 344:
YY_RULE_SETUP
#line 373 "sql.l"
{ INC_COLUMN_NO(yyleng); return NO_SYM; }
	YY_BREAK
case 345:
YY_RULE_SETUP
#line 374 "sql.l"
{ INC_COLUMN_NO(yyleng); return NO_WAIT_SYM; }
	YY_BREAK
case 346:
YY_RULE_SETUP
#line 375 "sql.l"
{ INC_COLUMN_NO(yyleng); return NODEGROUP_SYM; }
	YY_BREAK
case 347:
YY_RULE_SETUP
#line 376 "sql.l"
{ INC_COLUMN_NO(yyleng); return NONE_SYM; }
	YY_BREAK
case 348:
YY_RULE_SETUP
#line 377 "sql.l"
{ INC_COLUMN_NO(yyleng); return NOT_SYM; }
	YY_BREAK
case 349:
YY_RULE_SETUP
#line 378 "sql.l"
{ INC_COLUMN_NO(yyleng); return NO_WRITE_TO_BINLOG; }
	YY_BREAK
case 350:
YY_RULE_SETUP
#line 379 "sql.l"
{ INC_COLUMN_NO(yyleng); return NULL_SYM; }
	YY_BREAK
case 351:
YY_RULE_SETUP
#line 380 "sql.l"
{ INC_COLUMN_NO(yyleng); return NUMBER_SYM; }
	YY_BREAK
case 352:
YY_RULE_SETUP
#line 381 "sql.l"
{ INC_COLUMN_NO(yyleng); return NUMERIC_SYM; }
	YY_BREAK
case 353:
YY_RULE_SETUP
#line 382 "sql.l"
{ INC_COLUMN_NO(yyleng); return NVARCHAR_SYM; }
	YY_BREAK
case 354:
YY_RULE_SETUP
#line 383 "sql.l"
{ INC_COLUMN_NO(yyleng); return OFFSET_SYM; }
	YY_BREAK
case 355:
YY_RULE_SETUP
#line 384 "sql.l"
{ INC_COLUMN_NO(yyleng); return OLD_PASSWORD; }
	YY_BREAK
case 356:
YY_RULE_SETUP
#line 385 "sql.l"
{ INC_COLUMN_NO(yyleng); return ON; }
	YY_BREAK
case 357:
YY_RULE_SETUP
#line 386 "sql.l"
{ INC_COLUMN_NO(yyleng); return ONE_SYM; }
	YY_BREAK
case 358:
YY_RULE_SETUP
#line 387 "sql.l"
{ INC_COLUMN_NO(yyleng); return ONLY_SYM; }
	YY_BREAK
case 359:
YY_RULE_SETUP
#line 388 "sql.l"
{ INC_COLUMN_NO(yyleng); return OPEN_SYM; }
	YY_BREAK
case 360:
YY_RULE_SETUP
#line 389 "sql.l"
{ INC_COLUMN_NO(yyleng); return OPTIMIZE; }
	YY_BREAK
case 361:
YY_RULE_SETUP
#line 390 "sql.l"
{ INC_COLUMN_NO(yyleng); return OPTIONS_SYM; }
	YY_BREAK
case 362:
YY_RULE_SETUP
#line 391 "sql.l"
{ INC_COLUMN_NO(yyleng); return OPTION; }
	YY_BREAK
case 363:
YY_RULE_SETUP
#line 392 "sql.l"
{ INC_COLUMN_NO(yyleng); return OPTIONALLY; }
	YY_BREAK
case 364:
YY_RULE_SETUP
#line 393 "sql.l"
{ INC_COLUMN_NO(yyleng); return OR_SYM; }
	YY_BREAK
case 365:
YY_RULE_SETUP
#line 394 "sql.l"
{ INC_COLUMN_NO(yyleng); return ORDER_SYM; }
	YY_BREAK
case 366:
YY_RULE_SETUP
#line 395 "sql.l"
{ INC_COLUMN_NO(yyleng); return OUT_SYM; }
	YY_BREAK
case 367:
YY_RULE_SETUP
#line 396 "sql.l"
{ INC_COLUMN_NO(yyleng); return OUTER; }
	YY_BREAK
case 368:
YY_RULE_SETUP
#line 397 "sql.l"
{ INC_COLUMN_NO(yyleng); return OUTFILE; }
	YY_BREAK
case 369:
YY_RULE_SETUP
#line 398 "sql.l"
{ INC_COLUMN_NO(yyleng); return OWNER_SYM; }
	YY_BREAK
case 370:
YY_RULE_SETUP
#line 399 "sql.l"
{ INC_COLUMN_NO(yyleng); return PACK_KEYS_SYM; }
	YY_BREAK
case 371:
YY_RULE_SETUP
#line 400 "sql.l"
{ INC_COLUMN_NO(yyleng); return PARSER_SYM; }
	YY_BREAK
case 372:
YY_RULE_SETUP
#line 401 "sql.l"
{ INC_COLUMN_NO(yyleng); return PAGE_SYM; }
	YY_BREAK
case 373:
YY_RULE_SETUP
#line 402 "sql.l"
{ INC_COLUMN_NO(yyleng); return PARTIAL; }
	YY_BREAK
case 374:
YY_RULE_SETUP
#line 403 "sql.l"
{ INC_COLUMN_NO(yyleng); return PARTITION_SYM; }
	YY_BREAK
case 375:
YY_RULE_SETUP
#line 404 "sql.l"
{ INC_COLUMN_NO(yyleng); return PARTITIONING_SYM; }
	YY_BREAK
case 376:
YY_RULE_SETUP
#line 405 "sql.l"
{ INC_COLUMN_NO(yyleng); return PARTITIONS_SYM; }
	YY_BREAK
case 377:
YY_RULE_SETUP
#line 406 "sql.l"
{ INC_COLUMN_NO(yyleng); return PASSWORD; }
	YY_BREAK
case 378:
YY_RULE_SETUP
#line 407 "sql.l"
{ INC_COLUMN_NO(yyleng); return PHASE_SYM; }
	YY_BREAK
case 379:
YY_RULE_SETUP
#line 408 "sql.l"
{ INC_COLUMN_NO(yyleng); return PLUGIN_SYM; }
	YY_BREAK
case 380:
YY_RULE_SETUP
#line 409 "sql.l"
{ INC_COLUMN_NO(yyleng); return PLUGINS_SYM; }
	YY_BREAK
case 381:
YY_RULE_SETUP
#line 410 "sql.l"
{ INC_COLUMN_NO(yyleng); return PLUGIN_DIR_SYM; }
	YY_BREAK
case 382:
YY_RULE_SETUP
#line 411 "sql.l"
{ INC_COLUMN_NO(yyleng); return POINT_SYM; }
	YY_BREAK
case 383:
YY_RULE_SETUP
#line 412 "sql.l"
{ INC_COLUMN_NO(yyleng); return POLYGON; }
	YY_BREAK
case 384:
YY_RULE_SETUP
#line 413 "sql.l"
{ INC_COLUMN_NO(yyleng); return PORT_SYM; }
	YY_BREAK
case 385:
YY_RULE_SETUP
#line 414 "sql.l"
{ INC_COLUMN_NO(yyleng); return PRECISION; }
	YY_BREAK
case 386:
YY_RULE_SETUP
#line 415 "sql.l"
{ INC_COLUMN_NO(yyleng); return PREPARE_SYM; }
	YY_BREAK
case 387:
YY_RULE_SETUP
#line 416 "sql.l"
{ INC_COLUMN_NO(yyleng); return PRESERVE_SYM; }
	YY_BREAK
case 388:
YY_RULE_SETUP
#line 417 "sql.l"
{ INC_COLUMN_NO(yyleng); return PREV_SYM; }
	YY_BREAK
case 389:
YY_RULE_SETUP
#line 418 "sql.l"
{ INC_COLUMN_NO(yyleng); return PRIMARY_SYM; }
	YY_BREAK
case 390:
YY_RULE_SETUP
#line 419 "sql.l"
{ INC_COLUMN_NO(yyleng); return PRIVILEGES; }
	YY_BREAK
case 391:
YY_RULE_SETUP
#line 420 "sql.l"
{ INC_COLUMN_NO(yyleng); return PROCEDURE_SYM; }
	YY_BREAK
case 392:
YY_RULE_SETUP
#line 421 "sql.l"
{ INC_COLUMN_NO(yyleng); return PROCESS; }
	YY_BREAK
case 393:
YY_RULE_SETUP
#line 422 "sql.l"
{ INC_COLUMN_NO(yyleng); return PROCESSLIST_SYM; }
	YY_BREAK
case 394:
YY_RULE_SETUP
#line 423 "sql.l"
{ INC_COLUMN_NO(yyleng); return PROFILE_SYM; }
	YY_BREAK
case 395:
YY_RULE_SETUP
#line 424 "sql.l"
{ INC_COLUMN_NO(yyleng); return PROFILES_SYM; }
	YY_BREAK
case 396:
YY_RULE_SETUP
#line 425 "sql.l"
{ INC_COLUMN_NO(yyleng); return PROXY_SYM; }
	YY_BREAK
case 397:
YY_RULE_SETUP
#line 426 "sql.l"
{ INC_COLUMN_NO(yyleng); return PURGE; }
	YY_BREAK
case 398:
YY_RULE_SETUP
#line 427 "sql.l"
{ INC_COLUMN_NO(yyleng); return QUARTER_SYM; }
	YY_BREAK
case 399:
YY_RULE_SETUP
#line 428 "sql.l"
{ INC_COLUMN_NO(yyleng); return QUERY_SYM; }
	YY_BREAK
case 400:
YY_RULE_SETUP
#line 429 "sql.l"
{ INC_COLUMN_NO(yyleng); return QUICK; }
	YY_BREAK
case 401:
YY_RULE_SETUP
#line 430 "sql.l"
{ INC_COLUMN_NO(yyleng); return RANGE_SYM; }
	YY_BREAK
case 402:
YY_RULE_SETUP
#line 431 "sql.l"
{ INC_COLUMN_NO(yyleng); return READ_SYM; }
	YY_BREAK
case 403:
YY_RULE_SETUP
#line 432 "sql.l"
{ INC_COLUMN_NO(yyleng); return READ_ONLY_SYM; }
	YY_BREAK
case 404:
YY_RULE_SETUP
#line 433 "sql.l"
{ INC_COLUMN_NO(yyleng); return READ_WRITE_SYM; }
	YY_BREAK
case 405:
YY_RULE_SETUP
#line 434 "sql.l"
{ INC_COLUMN_NO(yyleng); return READS_SYM; }
	YY_BREAK
case 406:
YY_RULE_SETUP
#line 435 "sql.l"
{ INC_COLUMN_NO(yyleng); return REAL; }
	YY_BREAK
case 407:
YY_RULE_SETUP
#line 436 "sql.l"
{ INC_COLUMN_NO(yyleng); return REBUILD_SYM; }
	YY_BREAK
case 408:
YY_RULE_SETUP
#line 437 "sql.l"
{ INC_COLUMN_NO(yyleng); return RECOVER_SYM; }
	YY_BREAK
case 409:
YY_RULE_SETUP
#line 438 "sql.l"
{ INC_COLUMN_NO(yyleng); return REDO_BUFFER_SIZE_SYM; }
	YY_BREAK
case 410:
YY_RULE_SETUP
#line 439 "sql.l"
{ INC_COLUMN_NO(yyleng); return REDOFILE_SYM; }
	YY_BREAK
case 411:
YY_RULE_SETUP
#line 440 "sql.l"
{ INC_COLUMN_NO(yyleng); return REDUNDANT_SYM; }
	YY_BREAK
case 412:
YY_RULE_SETUP
#line 441 "sql.l"
{ INC_COLUMN_NO(yyleng); return REFERENCES; }
	YY_BREAK
case 413:
YY_RULE_SETUP
#line 442 "sql.l"
{ INC_COLUMN_NO(yyleng); return REGEXP; }
	YY_BREAK
case 414:
YY_RULE_SETUP
#line 443 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELAY; }
	YY_BREAK
case 415:
YY_RULE_SETUP
#line 444 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELAYLOG_SYM; }
	YY_BREAK
case 416:
YY_RULE_SETUP
#line 445 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELAY_LOG_FILE_SYM; }
	YY_BREAK
case 417:
YY_RULE_SETUP
#line 446 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELAY_LOG_POS_SYM; }
	YY_BREAK
case 418:
YY_RULE_SETUP
#line 447 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELAY_THREAD; }
	YY_BREAK
case 419:
YY_RULE_SETUP
#line 448 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELEASE_SYM; }
	YY_BREAK
case 420:
YY_RULE_SETUP
#line 449 "sql.l"
{ INC_COLUMN_NO(yyleng); return RELOAD; }
	YY_BREAK
case 421:
YY_RULE_SETUP
#line 450 "sql.l"
{ INC_COLUMN_NO(yyleng); return REMOVE_SYM; }
	YY_BREAK
case 422:
YY_RULE_SETUP
#line 451 "sql.l"
{ INC_COLUMN_NO(yyleng); return RENAME; }
	YY_BREAK
case 423:
YY_RULE_SETUP
#line 452 "sql.l"
{ INC_COLUMN_NO(yyleng); return REORGANIZE_SYM; }
	YY_BREAK
case 424:
YY_RULE_SETUP
#line 453 "sql.l"
{ INC_COLUMN_NO(yyleng); return REPAIR; }
	YY_BREAK
case 425:
YY_RULE_SETUP
#line 454 "sql.l"
{ INC_COLUMN_NO(yyleng); return REPEATABLE_SYM; }
	YY_BREAK
case 426:
YY_RULE_SETUP
#line 455 "sql.l"
{ INC_COLUMN_NO(yyleng); return REPLACE; }
	YY_BREAK
case 427:
YY_RULE_SETUP
#line 456 "sql.l"
{ INC_COLUMN_NO(yyleng); return REPLICATION; }
	YY_BREAK
case 428:
YY_RULE_SETUP
#line 457 "sql.l"
{ INC_COLUMN_NO(yyleng); return REPEAT_SYM; }
	YY_BREAK
case 429:
YY_RULE_SETUP
#line 458 "sql.l"
{ INC_COLUMN_NO(yyleng); return REQUIRE_SYM; }
	YY_BREAK
case 430:
YY_RULE_SETUP
#line 459 "sql.l"
{ INC_COLUMN_NO(yyleng); return RESET_SYM; }
	YY_BREAK
case 431:
YY_RULE_SETUP
#line 460 "sql.l"
{ INC_COLUMN_NO(yyleng); return RESIGNAL_SYM; }
	YY_BREAK
case 432:
YY_RULE_SETUP
#line 461 "sql.l"
{ INC_COLUMN_NO(yyleng); return RESTORE_SYM; }
	YY_BREAK
case 433:
YY_RULE_SETUP
#line 462 "sql.l"
{ INC_COLUMN_NO(yyleng); return RESTRICT; }
	YY_BREAK
case 434:
YY_RULE_SETUP
#line 463 "sql.l"
{ INC_COLUMN_NO(yyleng); return RESUME_SYM; }
	YY_BREAK
case 435:
YY_RULE_SETUP
#line 464 "sql.l"
{ INC_COLUMN_NO(yyleng); return RETURNED_SQLSTATE_SYM; }
	YY_BREAK
case 436:
YY_RULE_SETUP
#line 465 "sql.l"
{ INC_COLUMN_NO(yyleng); return RETURNS_SYM; }
	YY_BREAK
case 437:
YY_RULE_SETUP
#line 466 "sql.l"
{ INC_COLUMN_NO(yyleng); return RETURN_SYM; }
	YY_BREAK
case 438:
YY_RULE_SETUP
#line 467 "sql.l"
{ INC_COLUMN_NO(yyleng); return REVERSE_SYM; }
	YY_BREAK
case 439:
YY_RULE_SETUP
#line 468 "sql.l"
{ INC_COLUMN_NO(yyleng); return REVOKE; }
	YY_BREAK
case 440:
YY_RULE_SETUP
#line 469 "sql.l"
{ INC_COLUMN_NO(yyleng); return RIGHT; }
	YY_BREAK
case 441:
YY_RULE_SETUP
#line 470 "sql.l"
{ INC_COLUMN_NO(yyleng); return REGEXP; }/*LikeinmSQL2*/
	YY_BREAK
case 442:
YY_RULE_SETUP
#line 471 "sql.l"
{ INC_COLUMN_NO(yyleng); return ROLLBACK_SYM; }
	YY_BREAK
case 443:
YY_RULE_SETUP
#line 472 "sql.l"
{ INC_COLUMN_NO(yyleng); return ROLLUP_SYM; }
	YY_BREAK
case 444:
YY_RULE_SETUP
#line 473 "sql.l"
{ INC_COLUMN_NO(yyleng); return ROUTINE_SYM; }
	YY_BREAK
case 445:
YY_RULE_SETUP
#line 474 "sql.l"
{ INC_COLUMN_NO(yyleng); return ROW_SYM; }
	YY_BREAK
case 446:
YY_RULE_SETUP
#line 475 "sql.l"
{ INC_COLUMN_NO(yyleng); return ROW_COUNT_SYM; }
	YY_BREAK
case 447:
YY_RULE_SETUP
#line 476 "sql.l"
{ INC_COLUMN_NO(yyleng); return ROWS_SYM; }
	YY_BREAK
case 448:
YY_RULE_SETUP
#line 477 "sql.l"
{ INC_COLUMN_NO(yyleng); return ROW_FORMAT_SYM; }
	YY_BREAK
case 449:
YY_RULE_SETUP
#line 478 "sql.l"
{ INC_COLUMN_NO(yyleng); return RTREE_SYM; }
	YY_BREAK
case 450:
YY_RULE_SETUP
#line 479 "sql.l"
{ INC_COLUMN_NO(yyleng); return SAVEPOINT_SYM; }
	YY_BREAK
case 451:
YY_RULE_SETUP
#line 480 "sql.l"
{ INC_COLUMN_NO(yyleng); return SCHEDULE_SYM; }
	YY_BREAK
case 452:
YY_RULE_SETUP
#line 481 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATABASE; }
	YY_BREAK
case 453:
YY_RULE_SETUP
#line 482 "sql.l"
{ INC_COLUMN_NO(yyleng); return SCHEMA_NAME_SYM; }
	YY_BREAK
case 454:
YY_RULE_SETUP
#line 483 "sql.l"
{ INC_COLUMN_NO(yyleng); return DATABASES; }
	YY_BREAK
case 455:
YY_RULE_SETUP
#line 484 "sql.l"
{ INC_COLUMN_NO(yyleng); return SECOND_SYM; }
	YY_BREAK
case 456:
YY_RULE_SETUP
#line 485 "sql.l"
{ INC_COLUMN_NO(yyleng); return SECOND_MICROSECOND_SYM; }
	YY_BREAK
case 457:
YY_RULE_SETUP
#line 486 "sql.l"
{ INC_COLUMN_NO(yyleng); return SECURITY_SYM; }
	YY_BREAK
case 458:
YY_RULE_SETUP
#line 487 "sql.l"
{ INC_COLUMN_NO(yyleng); return SELECT_SYM; }
	YY_BREAK
case 459:
YY_RULE_SETUP
#line 488 "sql.l"
{ INC_COLUMN_NO(yyleng); return SENSITIVE_SYM; }
	YY_BREAK
case 460:
YY_RULE_SETUP
#line 489 "sql.l"
{ INC_COLUMN_NO(yyleng); return SEPARATOR_SYM; }
	YY_BREAK
case 461:
YY_RULE_SETUP
#line 490 "sql.l"
{ INC_COLUMN_NO(yyleng); return SERIAL_SYM; }
	YY_BREAK
case 462:
YY_RULE_SETUP
#line 491 "sql.l"
{ INC_COLUMN_NO(yyleng); return SERIALIZABLE_SYM; }
	YY_BREAK
case 463:
YY_RULE_SETUP
#line 492 "sql.l"
{ INC_COLUMN_NO(yyleng); return SESSION_SYM; }
	YY_BREAK
case 464:
YY_RULE_SETUP
#line 493 "sql.l"
{ INC_COLUMN_NO(yyleng); return SERVER_SYM; }
	YY_BREAK
case 465:
YY_RULE_SETUP
#line 494 "sql.l"
{ INC_COLUMN_NO(yyleng); return SET; }
	YY_BREAK
case 466:
YY_RULE_SETUP
#line 495 "sql.l"
{ INC_COLUMN_NO(yyleng); return SHARE_SYM; }
	YY_BREAK
case 467:
YY_RULE_SETUP
#line 496 "sql.l"
{ INC_COLUMN_NO(yyleng); return SHOW; }
	YY_BREAK
case 468:
YY_RULE_SETUP
#line 497 "sql.l"
{ INC_COLUMN_NO(yyleng); return SHUTDOWN; }
	YY_BREAK
case 469:
YY_RULE_SETUP
#line 498 "sql.l"
{ INC_COLUMN_NO(yyleng); return SIGNAL_SYM; }
	YY_BREAK
case 470:
YY_RULE_SETUP
#line 499 "sql.l"
{ INC_COLUMN_NO(yyleng); return SIGNED_SYM; }
	YY_BREAK
case 471:
YY_RULE_SETUP
#line 500 "sql.l"
{ INC_COLUMN_NO(yyleng); return SIMPLE_SYM; }
	YY_BREAK
case 472:
YY_RULE_SETUP
#line 501 "sql.l"
{ INC_COLUMN_NO(yyleng); return SLAVE; }
	YY_BREAK
case 473:
YY_RULE_SETUP
#line 502 "sql.l"
{ INC_COLUMN_NO(yyleng); return SLOW; }
	YY_BREAK
case 474:
YY_RULE_SETUP
#line 503 "sql.l"
{ INC_COLUMN_NO(yyleng); return SNAPSHOT_SYM; }
	YY_BREAK
case 475:
YY_RULE_SETUP
#line 504 "sql.l"
{ INC_COLUMN_NO(yyleng); return SMALLINT; }
	YY_BREAK
case 476:
YY_RULE_SETUP
#line 505 "sql.l"
{ INC_COLUMN_NO(yyleng); return SOCKET_SYM; }
	YY_BREAK
case 477:
YY_RULE_SETUP
#line 506 "sql.l"
{ INC_COLUMN_NO(yyleng); return ANY_SYM; }
	YY_BREAK
case 478:
YY_RULE_SETUP
#line 507 "sql.l"
{ INC_COLUMN_NO(yyleng); return SONAME_SYM; }
	YY_BREAK
case 479:
YY_RULE_SETUP
#line 508 "sql.l"
{ INC_COLUMN_NO(yyleng); return SOUNDS_SYM; }
	YY_BREAK
case 480:
YY_RULE_SETUP
#line 509 "sql.l"
{ INC_COLUMN_NO(yyleng); return SOURCE_SYM; }
	YY_BREAK
case 481:
YY_RULE_SETUP
#line 510 "sql.l"
{ INC_COLUMN_NO(yyleng); return SPATIAL_SYM; }
	YY_BREAK
case 482:
YY_RULE_SETUP
#line 511 "sql.l"
{ INC_COLUMN_NO(yyleng); return SPECIFIC_SYM; }
	YY_BREAK
case 483:
YY_RULE_SETUP
#line 512 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_SYM; }
	YY_BREAK
case 484:
YY_RULE_SETUP
#line 513 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQLEXCEPTION_SYM; }
	YY_BREAK
case 485:
YY_RULE_SETUP
#line 514 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQLSTATE_SYM; }
	YY_BREAK
case 486:
YY_RULE_SETUP
#line 515 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQLWARNING_SYM; }
	YY_BREAK
case 487:
YY_RULE_SETUP
#line 516 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_AFTER_GTIDS; }
	YY_BREAK
case 488:
YY_RULE_SETUP
#line 517 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_AFTER_MTS_GAPS; }
	YY_BREAK
case 489:
YY_RULE_SETUP
#line 518 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_BEFORE_GTIDS; }
	YY_BREAK
case 490:
YY_RULE_SETUP
#line 519 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_BIG_RESULT; }
	YY_BREAK
case 491:
YY_RULE_SETUP
#line 520 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_BUFFER_RESULT; }
	YY_BREAK
case 492:
YY_RULE_SETUP
#line 521 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_CACHE_SYM; }
	YY_BREAK
case 493:
YY_RULE_SETUP
#line 522 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_CALC_FOUND_ROWS; }
	YY_BREAK
case 494:
YY_RULE_SETUP
#line 523 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_NO_CACHE_SYM; }
	YY_BREAK
case 495:
YY_RULE_SETUP
#line 524 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_SMALL_RESULT; }
	YY_BREAK
case 496:
YY_RULE_SETUP
#line 525 "sql.l"
{ INC_COLUMN_NO(yyleng); return SQL_THREAD; }
	YY_BREAK
case 497:
YY_RULE_SETUP
#line 526 "sql.l"
{ INC_COLUMN_NO(yyleng); return SECOND_SYM; }
	YY_BREAK
case 498:
YY_RULE_SETUP
#line 527 "sql.l"
{ INC_COLUMN_NO(yyleng); return MINUTE_SYM; }
	YY_BREAK
case 499:
YY_RULE_SETUP
#line 528 "sql.l"
{ INC_COLUMN_NO(yyleng); return HOUR_SYM; }
	YY_BREAK
case 500:
YY_RULE_SETUP
#line 529 "sql.l"
{ INC_COLUMN_NO(yyleng); return DAY_SYM; }
	YY_BREAK
case 501:
YY_RULE_SETUP
#line 530 "sql.l"
{ INC_COLUMN_NO(yyleng); return WEEK_SYM; }
	YY_BREAK
case 502:
YY_RULE_SETUP
#line 531 "sql.l"
{ INC_COLUMN_NO(yyleng); return MONTH_SYM; }
	YY_BREAK
case 503:
YY_RULE_SETUP
#line 532 "sql.l"
{ INC_COLUMN_NO(yyleng); return QUARTER_SYM; }
	YY_BREAK
case 504:
YY_RULE_SETUP
#line 533 "sql.l"
{ INC_COLUMN_NO(yyleng); return YEAR_SYM; }
	YY_BREAK
case 505:
YY_RULE_SETUP
#line 534 "sql.l"
{ INC_COLUMN_NO(yyleng); return SSL_SYM; }
	YY_BREAK
case 506:
YY_RULE_SETUP
#line 535 "sql.l"
{ INC_COLUMN_NO(yyleng); return START_SYM; }
	YY_BREAK
case 507:
YY_RULE_SETUP
#line 536 "sql.l"
{ INC_COLUMN_NO(yyleng); return STARTING; }
	YY_BREAK
case 508:
YY_RULE_SETUP
#line 537 "sql.l"
{ INC_COLUMN_NO(yyleng); return STARTS_SYM; }
	YY_BREAK
case 509:
YY_RULE_SETUP
#line 538 "sql.l"
{ INC_COLUMN_NO(yyleng); return STATS_AUTO_RECALC_SYM; }
	YY_BREAK
case 510:
YY_RULE_SETUP
#line 539 "sql.l"
{ INC_COLUMN_NO(yyleng); return STATS_PERSISTENT_SYM; }
	YY_BREAK
case 511:
YY_RULE_SETUP
#line 540 "sql.l"
{ INC_COLUMN_NO(yyleng); return STATS_SAMPLE_PAGES_SYM; }
	YY_BREAK
case 512:
YY_RULE_SETUP
#line 541 "sql.l"
{ INC_COLUMN_NO(yyleng); return STATUS_SYM; }
	YY_BREAK
case 513:
YY_RULE_SETUP
#line 542 "sql.l"
{ INC_COLUMN_NO(yyleng); return STOP_SYM; }
	YY_BREAK
case 514:
YY_RULE_SETUP
#line 543 "sql.l"
{ INC_COLUMN_NO(yyleng); return STORAGE_SYM; }
	YY_BREAK
case 515:
YY_RULE_SETUP
#line 544 "sql.l"
{ INC_COLUMN_NO(yyleng); return STRAIGHT_JOIN; }
	YY_BREAK
case 516:
YY_RULE_SETUP
#line 545 "sql.l"
{ INC_COLUMN_NO(yyleng); return STRING_SYM; }
	YY_BREAK
case 517:
YY_RULE_SETUP
#line 546 "sql.l"
{ INC_COLUMN_NO(yyleng); return SUBCLASS_ORIGIN_SYM; }
	YY_BREAK
case 518:
YY_RULE_SETUP
#line 547 "sql.l"
{ INC_COLUMN_NO(yyleng); return SUBJECT_SYM; }
	YY_BREAK
case 519:
YY_RULE_SETUP
#line 548 "sql.l"
{ INC_COLUMN_NO(yyleng); return SUBPARTITION_SYM; }
	YY_BREAK
case 520:
YY_RULE_SETUP
#line 549 "sql.l"
{ INC_COLUMN_NO(yyleng); return SUBPARTITIONS_SYM; }
	YY_BREAK
case 521:
YY_RULE_SETUP
#line 550 "sql.l"
{ INC_COLUMN_NO(yyleng); return SUPER_SYM; }
	YY_BREAK
case 522:
YY_RULE_SETUP
#line 551 "sql.l"
{ INC_COLUMN_NO(yyleng); return SUSPEND_SYM; }
	YY_BREAK
case 523:
YY_RULE_SETUP
#line 552 "sql.l"
{ INC_COLUMN_NO(yyleng); return SWAPS_SYM; }
	YY_BREAK
case 524:
YY_RULE_SETUP
#line 553 "sql.l"
{ INC_COLUMN_NO(yyleng); return SWITCHES_SYM; }
	YY_BREAK
case 525:
YY_RULE_SETUP
#line 554 "sql.l"
{ INC_COLUMN_NO(yyleng); return TABLE_SYM; }
	YY_BREAK
case 526:
YY_RULE_SETUP
#line 555 "sql.l"
{ INC_COLUMN_NO(yyleng); return TABLE_NAME_SYM; }
	YY_BREAK
case 527:
YY_RULE_SETUP
#line 556 "sql.l"
{ INC_COLUMN_NO(yyleng); return TABLES; }
	YY_BREAK
case 528:
YY_RULE_SETUP
#line 557 "sql.l"
{ INC_COLUMN_NO(yyleng); return TABLESPACE; }
	YY_BREAK
case 529:
YY_RULE_SETUP
#line 558 "sql.l"
{ INC_COLUMN_NO(yyleng); return TABLE_CHECKSUM_SYM; }
	YY_BREAK
case 530:
YY_RULE_SETUP
#line 559 "sql.l"
{ INC_COLUMN_NO(yyleng); return TEMPORARY; }
	YY_BREAK
case 531:
YY_RULE_SETUP
#line 560 "sql.l"
{ INC_COLUMN_NO(yyleng); return TEMPTABLE_SYM; }
	YY_BREAK
case 532:
YY_RULE_SETUP
#line 561 "sql.l"
{ INC_COLUMN_NO(yyleng); return TERMINATED; }
	YY_BREAK
case 533:
YY_RULE_SETUP
#line 562 "sql.l"
{ INC_COLUMN_NO(yyleng); return TEXT_SYM; }
	YY_BREAK
case 534:
YY_RULE_SETUP
#line 563 "sql.l"
{ INC_COLUMN_NO(yyleng); return THAN_SYM; }
	YY_BREAK
case 535:
YY_RULE_SETUP
#line 564 "sql.l"
{ INC_COLUMN_NO(yyleng); return THEN_SYM; }
	YY_BREAK
case 536:
YY_RULE_SETUP
#line 565 "sql.l"
{ INC_COLUMN_NO(yyleng); return TIME_SYM; }
	YY_BREAK
case 537:
YY_RULE_SETUP
#line 566 "sql.l"
{ INC_COLUMN_NO(yyleng); return TIMESTAMP; }
	YY_BREAK
case 538:
YY_RULE_SETUP
#line 567 "sql.l"
{ INC_COLUMN_NO(yyleng); return TIMESTAMP_ADD; }
	YY_BREAK
case 539:
YY_RULE_SETUP
#line 568 "sql.l"
{ INC_COLUMN_NO(yyleng); return TIMESTAMP_DIFF; }
	YY_BREAK
case 540:
YY_RULE_SETUP
#line 569 "sql.l"
{ INC_COLUMN_NO(yyleng); return TINYBLOB; }
	YY_BREAK
case 541:
YY_RULE_SETUP
#line 570 "sql.l"
{ INC_COLUMN_NO(yyleng); return TINYINT; }
	YY_BREAK
case 542:
YY_RULE_SETUP
#line 571 "sql.l"
{ INC_COLUMN_NO(yyleng); return TINYTEXT; }
	YY_BREAK
case 543:
YY_RULE_SETUP
#line 572 "sql.l"
{ INC_COLUMN_NO(yyleng); return TO_SYM; }
	YY_BREAK
case 544:
YY_RULE_SETUP
#line 573 "sql.l"
{ INC_COLUMN_NO(yyleng); return TRAILING; }
	YY_BREAK
case 545:
YY_RULE_SETUP
#line 574 "sql.l"
{ INC_COLUMN_NO(yyleng); return TRANSACTION_SYM; }
	YY_BREAK
case 546:
YY_RULE_SETUP
#line 575 "sql.l"
{ INC_COLUMN_NO(yyleng); return TRIGGER_SYM; }
	YY_BREAK
case 547:
YY_RULE_SETUP
#line 576 "sql.l"
{ INC_COLUMN_NO(yyleng); return TRIGGERS_SYM; }
	YY_BREAK
case 548:
YY_RULE_SETUP
#line 577 "sql.l"
{ INC_COLUMN_NO(yyleng); return TRUE_SYM; }
	YY_BREAK
case 549:
YY_RULE_SETUP
#line 578 "sql.l"
{ INC_COLUMN_NO(yyleng); return TRUNCATE_SYM; }
	YY_BREAK
case 550:
YY_RULE_SETUP
#line 579 "sql.l"
{ INC_COLUMN_NO(yyleng); return TYPE_SYM; }
	YY_BREAK
case 551:
YY_RULE_SETUP
#line 580 "sql.l"
{ INC_COLUMN_NO(yyleng); return TYPES_SYM; }
	YY_BREAK
case 552:
YY_RULE_SETUP
#line 581 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNCOMMITTED_SYM; }
	YY_BREAK
case 553:
YY_RULE_SETUP
#line 582 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNDEFINED_SYM; }
	YY_BREAK
case 554:
YY_RULE_SETUP
#line 583 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNDO_BUFFER_SIZE_SYM; }
	YY_BREAK
case 555:
YY_RULE_SETUP
#line 584 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNDOFILE_SYM; }
	YY_BREAK
case 556:
YY_RULE_SETUP
#line 585 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNDO_SYM; }
	YY_BREAK
case 557:
YY_RULE_SETUP
#line 586 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNICODE_SYM; }
	YY_BREAK
case 558:
YY_RULE_SETUP
#line 587 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNION_SYM; }
	YY_BREAK
case 559:
YY_RULE_SETUP
#line 588 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNIQUE_SYM; }
	YY_BREAK
case 560:
YY_RULE_SETUP
#line 589 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNKNOWN_SYM; }
	YY_BREAK
case 561:
YY_RULE_SETUP
#line 590 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNLOCK_SYM; }
	YY_BREAK
case 562:
YY_RULE_SETUP
#line 591 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNINSTALL_SYM; }
	YY_BREAK
case 563:
YY_RULE_SETUP
#line 592 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNSIGNED; }
	YY_BREAK
case 564:
YY_RULE_SETUP
#line 593 "sql.l"
{ INC_COLUMN_NO(yyleng); return UNTIL_SYM; }
	YY_BREAK
case 565:
YY_RULE_SETUP
#line 594 "sql.l"
{ INC_COLUMN_NO(yyleng); return UPDATE_SYM; }
	YY_BREAK
case 566:
YY_RULE_SETUP
#line 595 "sql.l"
{ INC_COLUMN_NO(yyleng); return UPGRADE_SYM; }
	YY_BREAK
case 567:
YY_RULE_SETUP
#line 596 "sql.l"
{ INC_COLUMN_NO(yyleng); return USAGE; }
	YY_BREAK
case 568:
YY_RULE_SETUP
#line 597 "sql.l"
{ INC_COLUMN_NO(yyleng); return USE_SYM; }
	YY_BREAK
case 569:
YY_RULE_SETUP
#line 598 "sql.l"
{ INC_COLUMN_NO(yyleng); return USER; }
	YY_BREAK
case 570:
YY_RULE_SETUP
#line 599 "sql.l"
{ INC_COLUMN_NO(yyleng); return RESOURCES; }
	YY_BREAK
case 571:
YY_RULE_SETUP
#line 600 "sql.l"
{ INC_COLUMN_NO(yyleng); return USE_FRM; }
	YY_BREAK
case 572:
YY_RULE_SETUP
#line 601 "sql.l"
{ INC_COLUMN_NO(yyleng); return USING; }
	YY_BREAK
case 573:
YY_RULE_SETUP
#line 602 "sql.l"
{ INC_COLUMN_NO(yyleng); return UTC_DATE_SYM; }
	YY_BREAK
case 574:
YY_RULE_SETUP
#line 603 "sql.l"
{ INC_COLUMN_NO(yyleng); return UTC_TIME_SYM; }
	YY_BREAK
case 575:
YY_RULE_SETUP
#line 604 "sql.l"
{ INC_COLUMN_NO(yyleng); return UTC_TIMESTAMP_SYM; }
	YY_BREAK
case 576:
YY_RULE_SETUP
#line 605 "sql.l"
{ INC_COLUMN_NO(yyleng); return VALUE_SYM; }
	YY_BREAK
case 577:
YY_RULE_SETUP
#line 606 "sql.l"
{ INC_COLUMN_NO(yyleng); return VALUES; }
	YY_BREAK
case 578:
YY_RULE_SETUP
#line 607 "sql.l"
{ INC_COLUMN_NO(yyleng); return VARBINARY; }
	YY_BREAK
case 579:
YY_RULE_SETUP
#line 608 "sql.l"
{ INC_COLUMN_NO(yyleng); return VARCHAR; }
	YY_BREAK
case 580:
YY_RULE_SETUP
#line 609 "sql.l"
{ INC_COLUMN_NO(yyleng); return VARCHAR; }
	YY_BREAK
case 581:
YY_RULE_SETUP
#line 610 "sql.l"
{ INC_COLUMN_NO(yyleng); return VARIABLES; }
	YY_BREAK
case 582:
YY_RULE_SETUP
#line 611 "sql.l"
{ INC_COLUMN_NO(yyleng); return VARYING; }
	YY_BREAK
case 583:
YY_RULE_SETUP
#line 612 "sql.l"
{ INC_COLUMN_NO(yyleng); return WAIT_SYM; }
	YY_BREAK
case 584:
YY_RULE_SETUP
#line 613 "sql.l"
{ INC_COLUMN_NO(yyleng); return WARNINGS; }
	YY_BREAK
case 585:
YY_RULE_SETUP
#line 614 "sql.l"
{ INC_COLUMN_NO(yyleng); return WEEK_SYM; }
	YY_BREAK
case 586:
YY_RULE_SETUP
#line 615 "sql.l"
{ INC_COLUMN_NO(yyleng); return WEIGHT_STRING_SYM; }
	YY_BREAK
case 587:
YY_RULE_SETUP
#line 616 "sql.l"
{ INC_COLUMN_NO(yyleng); return WHEN_SYM; }
	YY_BREAK
case 588:
YY_RULE_SETUP
#line 617 "sql.l"
{ INC_COLUMN_NO(yyleng); return WHERE; }
	YY_BREAK
case 589:
YY_RULE_SETUP
#line 618 "sql.l"
{ INC_COLUMN_NO(yyleng); return WHILE_SYM; }
	YY_BREAK
case 590:
YY_RULE_SETUP
#line 619 "sql.l"
{ INC_COLUMN_NO(yyleng); return VIEW_SYM; }
	YY_BREAK
case 591:
YY_RULE_SETUP
#line 620 "sql.l"
{ INC_COLUMN_NO(yyleng); return WITH; }
	YY_BREAK
case 592:
YY_RULE_SETUP
#line 621 "sql.l"
{ INC_COLUMN_NO(yyleng); return WORK_SYM; }
	YY_BREAK
case 593:
YY_RULE_SETUP
#line 622 "sql.l"
{ INC_COLUMN_NO(yyleng); return WRAPPER_SYM; }
	YY_BREAK
case 594:
YY_RULE_SETUP
#line 623 "sql.l"
{ INC_COLUMN_NO(yyleng); return WRITE_SYM; }
	YY_BREAK
case 595:
YY_RULE_SETUP
#line 624 "sql.l"
{ INC_COLUMN_NO(yyleng); return X509_SYM; }
	YY_BREAK
case 596:
YY_RULE_SETUP
#line 625 "sql.l"
{ INC_COLUMN_NO(yyleng); return XOR; }
	YY_BREAK
case 597:
YY_RULE_SETUP
#line 626 "sql.l"
{ INC_COLUMN_NO(yyleng); return XA_SYM; }
	YY_BREAK
case 598:
YY_RULE_SETUP
#line 627 "sql.l"
{ INC_COLUMN_NO(yyleng); return XML_SYM; }
	YY_BREAK
case 599:
YY_RULE_SETUP
#line 628 "sql.l"
{ INC_COLUMN_NO(yyleng); return YEAR_SYM; }
	YY_BREAK
case 600:
YY_RULE_SETUP
#line 629 "sql.l"
{ INC_COLUMN_NO(yyleng); return YEAR_MONTH_SYM; }
	YY_BREAK
case 601:
YY_RULE_SETUP
#line 630 "sql.l"
{ INC_COLUMN_NO(yyleng); return ZEROFILL; }
	YY_BREAK
case 602:
YY_RULE_SETUP
#line 631 "sql.l"
{ INC_COLUMN_NO(yyleng); return OR_OR_SYM; }
	YY_BREAK
case 603:
#line 633 "sql.l"
case 604:
#line 634 "sql.l"
case 605:
#line 635 "sql.l"
case 606:
#line 636 "sql.l"
case 607:
#line 637 "sql.l"
case 608:
#line 638 "sql.l"
case 609:
#line 639 "sql.l"
case 610:
#line 640 "sql.l"
case 611:
#line 641 "sql.l"
case 612:
#line 642 "sql.l"
case 613:
#line 643 "sql.l"
case 614:
#line 644 "sql.l"
case 615:
#line 645 "sql.l"
case 616:
YY_RULE_SETUP
#line 645 "sql.l"
{ INC_COLUMN_NO(yyleng); return  yytext[0]; }
	YY_BREAK
/* functions */
case 617:
YY_RULE_SETUP
#line 647 "sql.l"
{ INC_COLUMN_NO(yyleng); return  ADDDATE_SYM; }
	YY_BREAK
case 618:
YY_RULE_SETUP
#line 648 "sql.l"
{ INC_COLUMN_NO(yyleng); return  BIT_AND; }
	YY_BREAK
case 619:
YY_RULE_SETUP
#line 649 "sql.l"
{ INC_COLUMN_NO(yyleng); return  BIT_OR; }
	YY_BREAK
case 620:
YY_RULE_SETUP
#line 650 "sql.l"
{ INC_COLUMN_NO(yyleng); return  BIT_XOR; }
	YY_BREAK
case 621:
YY_RULE_SETUP
#line 651 "sql.l"
{ INC_COLUMN_NO(yyleng); return  CAST_SYM; }
	YY_BREAK
case 622:
YY_RULE_SETUP
#line 652 "sql.l"
{ INC_COLUMN_NO(yyleng); return  COUNT_SYM; }
	YY_BREAK
case 623:
YY_RULE_SETUP
#line 653 "sql.l"
{ INC_COLUMN_NO(yyleng); return  CURDATE; }
	YY_BREAK
case 624:
YY_RULE_SETUP
#line 654 "sql.l"
{ INC_COLUMN_NO(yyleng); return  CURTIME; }
	YY_BREAK
case 625:
YY_RULE_SETUP
#line 655 "sql.l"
{ INC_COLUMN_NO(yyleng); return  DATE_ADD_INTERVAL; }
	YY_BREAK
case 626:
YY_RULE_SETUP
#line 656 "sql.l"
{ INC_COLUMN_NO(yyleng); return  DATE_SUB_INTERVAL; }
	YY_BREAK
case 627:
YY_RULE_SETUP
#line 657 "sql.l"
{ INC_COLUMN_NO(yyleng); return  EXTRACT_SYM; }
	YY_BREAK
case 628:
YY_RULE_SETUP
#line 658 "sql.l"
{ INC_COLUMN_NO(yyleng); return  GROUP_CONCAT_SYM; }
	YY_BREAK
case 629:
YY_RULE_SETUP
#line 659 "sql.l"
{ INC_COLUMN_NO(yyleng); return  MAX_SYM; }
	YY_BREAK
case 630:
YY_RULE_SETUP
#line 660 "sql.l"
{ INC_COLUMN_NO(yyleng); return  SUBSTRING; }   /* unireg function */
	YY_BREAK
case 631:
YY_RULE_SETUP
#line 661 "sql.l"
{ INC_COLUMN_NO(yyleng); return  MIN_SYM; }
	YY_BREAK
case 632:
YY_RULE_SETUP
#line 662 "sql.l"
{ INC_COLUMN_NO(yyleng); return  NOW_SYM; }
	YY_BREAK
case 633:
YY_RULE_SETUP
#line 663 "sql.l"
{ INC_COLUMN_NO(yyleng); return  POSITION_SYM; }
	YY_BREAK
case 634:
YY_RULE_SETUP
#line 664 "sql.l"
{ INC_COLUMN_NO(yyleng); return  USER; }
	YY_BREAK
case 635:
YY_RULE_SETUP
#line 665 "sql.l"
{ INC_COLUMN_NO(yyleng); return  STD_SYM; }
	YY_BREAK
case 636:
YY_RULE_SETUP
#line 666 "sql.l"
{ INC_COLUMN_NO(yyleng); return  STD_SYM; }
	YY_BREAK
case 637:
YY_RULE_SETUP
#line 667 "sql.l"
{ INC_COLUMN_NO(yyleng); return  STD_SYM; }
	YY_BREAK
case 638:
YY_RULE_SETUP
#line 668 "sql.l"
{ INC_COLUMN_NO(yyleng); return  STDDEV_SAMP_SYM; }
	YY_BREAK
case 639:
YY_RULE_SETUP
#line 669 "sql.l"
{ INC_COLUMN_NO(yyleng); return  SUBDATE_SYM; }
	YY_BREAK
case 640:
YY_RULE_SETUP
#line 670 "sql.l"
{ INC_COLUMN_NO(yyleng); return  SUBSTRING; }
	YY_BREAK
case 641:
YY_RULE_SETUP
#line 671 "sql.l"
{ INC_COLUMN_NO(yyleng); return  SUBSTRING; }
	YY_BREAK
case 642:
YY_RULE_SETUP
#line 672 "sql.l"
{ INC_COLUMN_NO(yyleng); return  SUM_SYM; }
	YY_BREAK
case 643:
YY_RULE_SETUP
#line 673 "sql.l"
{ INC_COLUMN_NO(yyleng); return  SYSDATE; }
	YY_BREAK
case 644:
YY_RULE_SETUP
#line 674 "sql.l"
{ INC_COLUMN_NO(yyleng); return  USER; }
	YY_BREAK
case 645:
YY_RULE_SETUP
#line 675 "sql.l"
{ INC_COLUMN_NO(yyleng); return  TRIM; }
	YY_BREAK
case 646:
YY_RULE_SETUP
#line 676 "sql.l"
{ INC_COLUMN_NO(yyleng); return  VARIANCE_SYM; }
	YY_BREAK
case 647:
YY_RULE_SETUP
#line 677 "sql.l"
{ INC_COLUMN_NO(yyleng); return  VARIANCE_SYM; }
	YY_BREAK
case 648:
YY_RULE_SETUP
#line 678 "sql.l"
{ INC_COLUMN_NO(yyleng); return  VAR_SAMP_SYM; }
	YY_BREAK
case 649:
YY_RULE_SETUP
#line 679 "sql.l"
{ INC_COLUMN_NO(yyleng); return  WITH_CUBE_SYM; }
	YY_BREAK
case 650:
YY_RULE_SETUP
#line 680 "sql.l"
{ INC_COLUMN_NO(yyleng); return  WITH_ROLLUP_SYM; }
	YY_BREAK
case 651:
YY_RULE_SETUP
#line 681 "sql.l"
{ INC_COLUMN_NO(yyleng); return  NOT2_SYM; }
	YY_BREAK
case 652:
YY_RULE_SETUP
#line 682 "sql.l"
{ INC_COLUMN_NO(yyleng); return  OR2_SYM; }
	YY_BREAK
case 653:
YY_RULE_SETUP
#line 683 "sql.l"
{ INC_COLUMN_NO(yyleng); return  PARAM_MARKER; }
	YY_BREAK
case 654:
YY_RULE_SETUP
#line 684 "sql.l"
{ INC_COLUMN_NO(yyleng); return  SET_VAR; }
	YY_BREAK
/* one line comment */
case 655:
YY_RULE_SETUP
#line 689 "sql.l"
{ INC_LINE_NO(1); }
	YY_BREAK
/* 
        take care this only for rds normalize sql, 
        other user remove below 
    */
case 656:
YY_RULE_SETUP
#line 694 "sql.l"
{ INC_COLUMN_NO(yyleng); }
	YY_BREAK
/* numbers */
case 657:
YY_RULE_SETUP
#line 698 "sql.l"
{ INC_COLUMN_NO(yyleng); return NUM; }
	YY_BREAK
case 658:
#line 701 "sql.l"
case 659:
#line 702 "sql.l"
case 660:
#line 703 "sql.l"
case 661:
#line 704 "sql.l"
case 662:
YY_RULE_SETUP
#line 704 "sql.l"
{ INC_COLUMN_NO(yyleng); return FLOAT_NUM; }
	YY_BREAK
/* strings single quote or double quote */
case 663:
#line 708 "sql.l"
case 664:
YY_RULE_SETUP
#line 708 "sql.l"
{
                INC_COLUMN_NO(yyleng); 
                string name(yytext + 1, strlen(yytext)-2); 
                yylval.pItem = g_itemCreator.newItem(name);
                return TEXT_STRING; 
                }
	YY_BREAK
case 665:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 715 "sql.l"
{ 
                    INC_COLUMN_NO(yyleng); 
                    yyerror("Unterminated string"); 
                 }
	YY_BREAK
case 666:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 719 "sql.l"
{ 
                    INC_COLUMN_NO(yyleng);
                    yyerror("Unterminated string"); 
                    }
	YY_BREAK
/* hex strings */
case 667:
#line 726 "sql.l"
case 668:
YY_RULE_SETUP
#line 726 "sql.l"
{   
                INC_COLUMN_NO(yyleng);
                yylval.pItem = g_itemCreator.newItem(yytext);
                return HEX_NUM; 
             }
	YY_BREAK
/* bit strings */
case 669:
#line 735 "sql.l"
case 670:
YY_RULE_SETUP
#line 735 "sql.l"
{ 
               INC_COLUMN_NO(yyleng);
               yylval.pItem = g_itemCreator.newItem(yytext);
               return BIN_NUM; 
             }
	YY_BREAK
case 671:
YY_RULE_SETUP
#line 742 "sql.l"
{ 
                            INC_COLUMN_NO(yyleng);
                            yylval.pItem = g_itemCreator.newItem(yytext); 
                            return  IDENT_QUOTED; 
                         }
	YY_BREAK
case 672:
YY_RULE_SETUP
#line 748 "sql.l"
{ 
                            INC_COLUMN_NO(yyleng);
                            yylval.pItem = g_itemCreator.newItem(yytext); 
                            return  IDENT; 
                         }
	YY_BREAK
case 673:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 754 "sql.l"
{ 
                           INC_COLUMN_NO(yyleng);
                           yyerror("unterminated quoted name"); 
                       }
	YY_BREAK
/* user variables */
case 674:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 761 "sql.l"
{ 
      INC_COLUMN_NO(yyleng);
      yyerror("unterminated quoted user variable"); 
      }
	YY_BREAK
case 675:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 765 "sql.l"
{ 
      INC_COLUMN_NO(yyleng);
      yyerror("unterminated quoted user variable"); 
      }
	YY_BREAK
case 676:
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */
yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 769 "sql.l"
{ 
      INC_COLUMN_NO(yyleng);
      yyerror("unterminated quoted user variable"); 
      }
	YY_BREAK
/* comments */   
case 677:
YY_RULE_SETUP
#line 775 "sql.l"
{ INC_LINE_NO(1); }
	YY_BREAK
case 678:
YY_RULE_SETUP
#line 777 "sql.l"
{ INC_COLUMN_NO(yyleng); oldstate = YY_START; BEGIN COMMENT; }
	YY_BREAK
case 679:
YY_RULE_SETUP
#line 778 "sql.l"
{ INC_COLUMN_NO(yyleng); BEGIN oldstate; }
	YY_BREAK
case 680:
YY_RULE_SETUP
#line 779 "sql.l"
{ INC_COLUMN_NO(yyleng);  }
	YY_BREAK
case 681:
YY_RULE_SETUP
#line 780 "sql.l"
{ INC_LINE_NO(1); }
	YY_BREAK
case YY_STATE_EOF(COMMENT):
#line 781 "sql.l"
{ INC_COLUMN_NO(yyleng); yyerror("unclosed comment"); }
	YY_BREAK
/* everything else */
/* white space and newline skip */
case 682:
YY_RULE_SETUP
#line 789 "sql.l"
{ INC_COLUMN_NO(yyleng); }    
	YY_BREAK
case 683:
YY_RULE_SETUP
#line 790 "sql.l"
{ INC_LINE_NO(1); }
	YY_BREAK
case 684:
YY_RULE_SETUP
#line 791 "sql.l"
{ INC_COLUMN_NO(yyleng); yyerror("mystery character"); } 
	YY_BREAK
case 685:
YY_RULE_SETUP
#line 794 "sql.l"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 6235 "sql_lex.cpp"
			case YY_STATE_EOF(INITIAL):
			case YY_STATE_EOF(BTWMODE):
				yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a singled characater, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 2973 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		*yy_state_ptr++ = yy_current_state;
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;

	register YY_CHAR yy_c = 1;
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 2973 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	*yy_state_ptr++ = yy_current_state;
	yy_is_jam = (yy_current_state == 2972);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	if ( c == '\n' )
		--yylineno;

	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yytext_ptr = yy_c_buf_p;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						{
						yy_c_buf_p =
						yytext_ptr + YY_MORE_ADJ;
						return EOF;
						}

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
					break;

				case EOB_ACT_LAST_MATCH:
#ifdef __cplusplus
					YY_FATAL_ERROR(
					"unexpected last match in yyinput()" );
#else
					YY_FATAL_ERROR(
					"unexpected last match in input()" );
#endif
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;

	if ( c == '\n' )
		++yylineno;

	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *str )
#else
YY_BUFFER_STATE yy_scan_string( str )
yyconst char *str;
#endif
	{
	int len;
	for ( len = 0; str[len]; ++len )
		;

	return yy_scan_bytes( str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n - YY_MORE_ADJ; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 794 "sql.l"


void lex_destroyBuffer(CLexProcessState& cLexState)    
{
    yy_delete_buffer((yy_buffer_state*)cLexState.get_bufferState());
}

void lex_prepareBuffer(CLexProcessState& cLexState)
{
    cLexState.set_bufferState(yy_create_buffer(cLexState.get_fp(), YY_BUF_SIZE));
    yy_switch_to_buffer((yy_buffer_state*)cLexState.get_bufferState());
    yy_set_interactive(false);
}